<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mapping | Mountain Doodles]]></title>
  <link href="http://doodles.mountainmath.ca/blog/categories/mapping/feed.atom" rel="self"/>
  <link href="http://doodles.mountainmath.ca/"/>
  <updated>2017-03-03T10:13:57-08:00</updated>
  <id>http://doodles.mountainmath.ca/</id>
  <author>
    <name><![CDATA[MountainMath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mobi Running Stats]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/08/24/mobi-running-stats/"/>
    <updated>2016-08-24T09:45:54-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/08/24/mobi-running-stats</id>
    <content type="html"><![CDATA[<p><a href="http://mountainmath.ca/mobi#14.287582005629245/49.2742/-123.1277" target="_blank"><img  src="http://doodles.mountainmath.ca/images/mobi_main2.png"  style="width:50%;float:right;margin-left:10px;"></a>
I keep getting questions about Mobi stats these days. Rather than ansering them one by one I decided to just offer a live
view into data generated by our shadow API. I made two simple views, the most recent month of daily bike checkout counts
and the most recent week of hourly bike checkout counts. The data issues mentioned in our
<a href="http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look/">previous post</a> still apply. For data geeks, here is a link to a
<a href="https://twitter.com/serialc/status/767096443165376512">very useful paper</a> that compared estimates like I make to real
usage data.</p>

<!-- more -->


<p>Apart from the usual caveats when dealing with scraped data, Mobi data comes with additional issues like duplicate stations
that need to be filtered out to get proper counts. The view into the database below filters out these and other current
known issues with Mobi data. But as this is a live view, it might not correctly deal with future unforseen issues with
Mobi data. New stations, once Mobi adds them, will automatically show up on our Mobi map and will also be counted in the
live usage graphs.</p>

<h3>Daily Usage</h3>

<p>This graphs shows the daily total counts of bikes checked out (with the usual data quality caveats) for the past month
(starting from August 12, 2016).</p>

<div style="margin:5px  0 20px 0;padding:2px;border: 1px solid black;border-radius:5px;width:100%;">
  <div id="graph_daily" style="height:200px;" data-url="https://mountainmath.ca/bike_providers/1/daily.json"></div>
</div>


<h3>Hourly Usage</h3>

<p>This graphs shows the hourly total counts of bikes checked out (with the usual data quality caveats) for the past week.</p>

<div style="margin:5px  0 20px 0;padding:2px;border: 1px solid black;border-radius:5px;width:100%;">
  <div id="graph_hourly" style="height:200px;" data-url="https://mountainmath.ca/bike_providers/1/hourly.json"></div>
</div>


<h3>Auto Updating</h3>

<p>The above graphs are dynamic, they display the latest available numbers. Feel free do come back to this page to check
how usage develops over time. If you come back in one hour, it will have the latest hourly counts. If you come back
tomorrow, it will have an additional day of data.</p>

<h3>Map Update</h3>

<p>We also thought that adding a little more context to the <a href="http://mountainmath.ca/mobi">bike share map</a> would be useful,
so we added some gentle colouring to highlight parks, retail and institutional land uses.</p>

<p>The bike infrastructure
(and land use) data comes straight from OpenStreetMap. Everyone is
welcome to help update OpenStreetMap data. If you are on a desktop and shift-click into our map it will bring up the
OpenStreetMap editor. There you can add the newest separated bike lane or make other changes (after logging in or signing
up for an account). It will take between 1 to 5 hours for changes to go live on our map, and the changes you make will
also be available to any other app relying on OpenStreetMap data.</p>

<div><script>

function graphBikeStation(selector,station_id){
  var outerHeight=$(selector).height(),
      outerWidth=$($(selector)[0].parentNode).width();
  var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = outerWidth - margin.left - margin.right,
      height = outerHeight - margin.top - margin.bottom;

  var formatDate = d3.time.format("%X");
  var x = d3.time.scale()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis().scale(x).orient('bottom');

  var yAxis = d3.svg.axis().scale(y).orient('left').ticks(5);

  var line = d3.svg.line()
      .x(function(d) { return x(d.created_at); })
      .y(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');
  var bikeArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return y(d.available_bikes); })
      .y1(function(d) { return height; })
      .interpolate('step-after');
  var dockArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return 0; })
      .y1(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');


  var svg = d3.select(selector).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.json('http://mountainmath.ca/bike_providers/1/bike_stations/' + station_id + '.json?days=7',function(error,data){
  data=data[0].stations[0].statuses;
  data.forEach(function(d){type(d)});
  var last=data[data.length-1];
  var lastTime=new Date(d3.time.format.iso.parse(last.updated_at).getTime() + 5*60000);
  data.push({id:last.id,available_bikes:last.available_bikes,free_docks:last.free_docks,created_at:lastTime,updated_at:lastTime});

  x.domain(d3.extent(data, function(d) { return d.created_at; }));
  y.domain([0,data[0].available_bikes+data[0].free_docks]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//      .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Available Bikes");

  svg.append("path")
      .datum(data)
      .attr("class", "area bike")
      .style("fill",'rgba(33, 139, 51, 0.7)')
      .attr("d", bikeArea);
  svg.append("path")
      .datum(data)
      .attr("class", "area dock")
      .style("fill",'rgba(212, 10, 44, 0.7')
      .attr("d", dockArea);


  function type(d) {
    d.created_at = d3.time.format.iso.parse(d.created_at);
    d.available_bikes = +d.available_bikes;
    return d;
  }
  });
}



function bar_graph(div,shiftAxis,domainFormatter,rangeFormatter,domainLabelFormatter,rangeLabelFormatter){
    if (!domainFormatter) domainFormatter=d3.format("d");
    if (!rangeLabelFormatter) rangeLabelFormatter=rangeFormatter;
    if (!rangeFormatter)
     rangeFormatter = function (y) {
        return y;
     };
     if (!domainLabelFormatter) domainLabelFormatter=domainFormatter;

var margin = {top: 20, right: 20, bottom: 40, left: 70},
    width = parseInt(div.style("width")) - margin.left - margin.right,
    height = parseInt(div.style("height")) - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);


var xAxis = d3.svg.axis()
    .scale(x)
    .tickFormat(domainFormatter)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(rangeFormatter)
    .ticks(5, rangeFormatter);

var svg = div.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data_url=div[0][0].dataset.url;

d3.json(data_url, function(error, json) {
  if (error) throw error;
  var graphData=json[0];
  var data=graphData.data;
  
  //data.forEach(function(d,i){d.date= d3.time.format.iso.parse(d.date)});
  
  var container=d3.select(div.node().parentNode);
  container.selectAll('.legend.no-margin').remove();
  var legend=container.append('div').attr('class',"legend no-margin");
  legend.append('p').html('<i style="background:'+graphData.color + '"></i>' + graphData.label +  '<span style="float:right;margin-right:10px;" id="' + graphData.class+'_value"></span>');
  
  x.domain(data.map(function(d) {return d.date }));
  y.domain([0, d3.max(data, function(d) { return d.count; })]);
  
  var domainTickValues=[];
  var skip=Math.round(60/x.rangeBand());
  if (skip<=0) skip=1;
  for (var i=0;i<x.domain().length;i++) {
    if (i % skip==0) domainTickValues.push(x.domain()[i]);
  }
  //if (x.domain().length % 5 !=0) domainTickValues.push(x.domain()[x.domain().length-1]);
  xAxis.tickValues(domainTickValues);

  var xShift=shiftAxis ?  -x.rangeBand()/2.0 * 1.1 : 0;
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(" + xShift + "," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//    .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Probability");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", graphData.class + " bar")
      .style("fill", graphData.color)
      .attr("x", function(d) { return x(d.date); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); })
      .on('mouseover',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('click',function(d){
       d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('touch',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

      
});

}



var numberFormatter=d3.format(",");
var dateFormatter=function(d){return d};//d3.time.format("%a %I%p");//d3.time.format("%a %H:%M"); //d3.format(",");//
bar_graph(d3.select("#graph_daily"),false,dateFormatter,numberFormatter);
bar_graph(d3.select("#graph_hourly"),false,dateFormatter,numberFormatter);

graphBikeStation('#station_graph_os',1);
</script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobi -- a First Look]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look/"/>
    <updated>2016-08-16T13:06:58-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look</id>
    <content type="html"><![CDATA[<p><a href="http://mountainmath.ca/mobi#14.287582005629245/49.2742/-123.1277" target="_blank"><img  src="http://doodles.mountainmath.ca/images/mobi_main.png"  style="width:50%;float:right;margin-left:10px;"></a>
Vancouver finally has a bikeshare system. And everyone is hoping it will succeed, despite the obstacles BC&rsquo;s mandatory
helmet law poses for the system. So we are eager to find out how things are going with Mobi.</p>

<p>To set the background, consider that
<a href="http://www.seattlemet.com/articles/2016/3/21/the-rise-and-fall-and-possible-rise-again-of-pronto">Seattle&rsquo;s Pronto is getting less than 1 ride per bike per day</a>
after half a year in operation. In comparison, bike shares that are considered &lsquo;successful&rsquo; in North America get 3 to 5
rides per bike per day. Taipei&rsquo;s system, which I am particularly fond of, gets over 11 rides per bike per day.</p>

<p>So how about Mobi? It barely started, and it&rsquo;s not really fair to run the numbers right now. But we just couldn&rsquo;t hold
our curiosity back.</p>

<!-- more -->


<h3>Data</h3>

<p>First off, some caveats. Mobi does not have an official API for their system. In fact, they only provide a barely usable
<a href="https://www.mobibikes.ca">map of station statuses at the bottom of their landing page</a>. So we decided to
jump in and scrape their data to <a href="http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map/">make our own map</a>. In
absence of better alternatives, the <em>official</em> Mobi smartphone app is still not released, the map has gotten quite popular.
And in absence of an official Mobi API there are now others, like <a href="http://transitapp.com/">TransitApp</a>, that are consuming our
<a href="http://mountainmath.ca/mobi/stations">station data shadow API</a>.</p>

<p>What that means in terms of data quality is that while we get fairly accurate station bike counts at about a 1-minute
interval, there are some issues with using the data for rigorous analysis. If a bike gets checked in while another one
gets checked out at about the same time there is a good chance that we will miss it. And we can&rsquo;t distinguish rebalancing
from a group of people checking out or dropping off a bunch of bikes at the same time. And we don&rsquo;t have individual bike
data to look at travel patterns, for example what popular trip patterns are. Moreover we currently don&rsquo;t collect and store
weather data, an important variable that should be included in any bike share analysis.</p>

<p>That pretty much rules out anything but high level analysis.</p>

<h3>Station History</h3>

<p>To get an initial idea we started to look at station history. We only started recording Saturday 13th. For the fun of it
we added one day history to our <a href="https://mountainmath.ca/mobi">Mobi bike station and bike infrastructure map</a>. Drop me
a line if you are interested in longer timeframes.</p>

<p>Taking a look at the daily overall usage patterns</p>

<div style="padding:2px;border: 1px solid black;border-radius:5px;">
<div id="graph_mobi_hourly" style="height:200px;max-width:640px;" data-url="/data/mobi_hourly.json"></div>
</div>


<p>things are pretty much as expected. Nice Gaussians for the weekend usage, and some commute spikes for the weekday usage.
Squinting really hard one might want to make out a slight lunchtime boost, we will have to collect more data to confirm
that.</p>

<p>Another thing we see is that usage seems to hit a low point around 4am, so that&rsquo;s a good time to divide up the days when
looking at daily usage. Adding up the rides we get around 1400 rides a day. At around 3am we detect 490 bikes in the
stations, so that makes about 3 rides per bike per day. On average. That a pretty impressive number for a system that is
just getting off the ground. And that&rsquo;s while still in &ldquo;members only&rdquo; mode. The nice weather has helped, but there is no
getting around the fact that Mobi is off to a great start!</p>

<p>Of course not every bike is getting 3 rides. Some get more, some get less. For example, a bike parked at the
<a href="http://mountainmath.ca/mobi#17/49.27147/-123.10407">Ontario &amp; Seawall</a> station has been very popular, here is live data
on the most recent days of usage.
 <div id="station_graph_os" style="height:150px;"></div></p>

<p><a href="http://mountainmath.ca/mobi#19/49.26084/-123.11418" target="_blank"><img  src="http://doodles.mountainmath.ca/images/yukon_12.png"  style="width:50%;float:right;margin-left:10px;"></a>
On the other hand, bikes at <a href="http://mountainmath.ca/mobi#19/49.26084/-123.11418">Yukon &amp; 12th</a> have been having a hard
time to find riders. Both stations are at the
current boundary of the system, it is hard to say what makes the difference. The particular location of the least used
station is sure to get some people talking.</p>

<p>Mobi is undoubtedly carefully
analyzing their station usage and incorporating that into their strategic planning how to expand their network. And
hopefully publish a useful API for all the data geeks out there.</p>

<div><script>

function graphBikeStation(selector,station_id){
  var outerHeight=$(selector).height(),
      outerWidth=$($(selector)[0].parentNode).width();
  var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = outerWidth - margin.left - margin.right,
      height = outerHeight - margin.top - margin.bottom;

  var formatDate = d3.time.format("%X");
  var x = d3.time.scale()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis().scale(x).orient('bottom');

  var yAxis = d3.svg.axis().scale(y).orient('left').ticks(5);

  var line = d3.svg.line()
      .x(function(d) { return x(d.created_at); })
      .y(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');
  var bikeArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return y(d.available_bikes); })
      .y1(function(d) { return height; })
      .interpolate('step-after');
  var dockArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return 0; })
      .y1(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');


  var svg = d3.select(selector).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.json('http://mountainmath.ca/bike_providers/1/bike_stations/' + station_id + '.json?days=7',function(error,data){
  data=data[0].stations[0].statuses;
  data.forEach(function(d){type(d)});
  var last=data[data.length-1];
  var lastTime=new Date(d3.time.format.iso.parse(last.updated_at).getTime() + 5*60000);
  data.push({id:last.id,available_bikes:last.available_bikes,free_docks:last.free_docks,created_at:lastTime,updated_at:lastTime});

  x.domain(d3.extent(data, function(d) { return d.created_at; }));
  y.domain([0,data[0].available_bikes+data[0].free_docks]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//      .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Available Bikes");

  svg.append("path")
      .datum(data)
      .attr("class", "area bike")
      .style("fill",'rgba(33, 139, 51, 0.7)')
      .attr("d", bikeArea);
  svg.append("path")
      .datum(data)
      .attr("class", "area dock")
      .style("fill",'rgba(212, 10, 44, 0.7')
      .attr("d", dockArea);


  function type(d) {
    d.created_at = d3.time.format.iso.parse(d.created_at);
    d.available_bikes = +d.available_bikes;
    return d;
  }
  });
}



function bar_graph(div,shiftAxis,domainFormatter,rangeFormatter,domainLabelFormatter,rangeLabelFormatter){
    if (!domainFormatter) domainFormatter=d3.format("d");
    if (!rangeLabelFormatter) rangeLabelFormatter=rangeFormatter;
    if (!rangeFormatter)
     rangeFormatter = function (y) {
        return y;
     };
     if (!domainLabelFormatter) domainLabelFormatter=domainFormatter;

var margin = {top: 20, right: 20, bottom: 40, left: 70},
    width = parseInt(div.style("width")) - margin.left - margin.right,
    height = parseInt(div.style("height")) - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);


var xAxis = d3.svg.axis()
    .scale(x)
    .tickFormat(domainFormatter)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(rangeFormatter)
    .ticks(5, rangeFormatter);

var svg = div.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data_url=div[0][0].dataset.url;

d3.json(data_url, function(error, json) {
  if (error) throw error;
  var graphData=json[0];
  var data=graphData.data;
  
  data.forEach(function(d,i){d.date= d3.time.format.iso.parse(d.date)});
  
  var container=d3.select(div.node().parentNode);
  container.selectAll('.legend.no-margin').remove();
  var legend=container.append('div').attr('class',"legend no-margin");
  legend.append('p').html('<i style="background:'+graphData.color + '"></i>' + graphData.label +  '<span style="float:right;margin-right:10px;" id="' + graphData.class+'_value"></span>');
  
  x.domain(data.map(function(d) {return d.date }));
  y.domain([0, d3.max(data, function(d) { return d.count; })]);
  
  var domainTickValues=[];
  var skip=Math.round(60/x.rangeBand());
  if (skip<=0) skip=1;
  for (var i=0;i<x.domain().length;i++) {
    if (i % skip==0) domainTickValues.push(x.domain()[i]);
  }
  //if (x.domain().length % 5 !=0) domainTickValues.push(x.domain()[x.domain().length-1]);
  xAxis.tickValues(domainTickValues);

  var xShift=shiftAxis ?  -x.rangeBand()/2.0 * 1.1 : 0;
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(" + xShift + "," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//    .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Probability");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", graphData.class + " bar")
      .style("fill", graphData.color)
      .attr("x", function(d) { return x(d.date); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); })
      .on('mouseover',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('click',function(d){
       d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('touch',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

      
});

}



var numberFormatter=d3.format(",");
var dateFormatter=d3.time.format("%a %I%p");//d3.time.format("%a %H:%M"); //d3.format(",");//
bar_graph(d3.select("#graph_mobi_hourly"),true,dateFormatter,numberFormatter);

graphBikeStation('#station_graph_os',1);
</script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bike Share Map]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map/"/>
    <updated>2016-07-26T15:12:06-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map</id>
    <content type="html"><![CDATA[<p><a href="https://mountainmath.ca/mobi" target="_blank"><img  src="http://doodles.mountainmath.ca/images/bike-share-image-large.png"  style="width:50%;float:right;margin-left:10px;"></a>
It is no secret that we at MountainMath like bikes. And maps. And open data and sharing. We guess you know where
this is going.</p>

<p>Vancouver has finally gotten a bike share system, and we are loving it. So we took the occasion to take our
<a href="http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map/">old bike infrastructure maps</a>, polished them up a
bit using <a href="https://mapzen.com/blog/targeted-editing-cycleways/">Mapzen&rsquo;s bike map style</a> and adapted it for our purposes.</p>

<p>The result is our <a href="https://mountainmath.ca/mobi" class="btn btn-primary">Vancouver Bike Share Map</a>. (Fair
warning. While this map works great on your iOS and Android phone, it may not work on old desktop computers.)</p>

<p>Add it to your phone home screen, and it will be right at your fingertips when you need it!</p>

<!-- more -->


<p>And we threw the <a href="https://www.mobibikes.ca/">Mobi Bike Share</a> station data on top. That last part turned out a little
more messy than expected, the API that was <a href="https://bikeshare-research.org/#bssid:vancouver">linked at the Bike Share Research website</a>
is broken, and the Mobi redirects are malformed and no guesswork would yield a working API. Luckily
the <a href="https://twitter.com/oobr">bike share map wizard</a> on
Twitter <a href="https://twitter.com/oobr/status/756211668141547520">had the answer</a> how to tease out the station data. And some
of the stations are duplicate, so it took some time to clean up the data properly.</p>

<p>We tried to keep our map as simple as possible. This iteration highlights three types of infrastructure, separated, bike lanes and
shared lanes. The map has some hill-shading for reference, and at high zoom level it shows some bike points-of-interest.
The rest is kept clean and simple.</p>

<p>For the stations, we weren&rsquo;t fans of the icons and presentation used on many other maps. We decided on a simple
donut-style presentation to visualize available bikes to check out and empty slots to return them. This is the most crucial
information for a bike share user. Where can I check out a bike, and where can I return one. There is nothing more frustrating
than having to go to a meeting and being unable to check the bike back into a station because it is full. The map gives
a quick visual guide for this, although the Mobi data lags quite a bit right now. Hopefully that will change in the future
once they get their API up and running.</p>

<p>On touch/hover the bike stations expand to give exact counts and the station name. Station sizes vary and counts can be
useful at times. We opted to keep the icon size independent of station size, trading added information for a cleaner
presentation by only revealing it on user interaction.</p>

<p>This map focuses on the bike share user. If you are more interested in stats and overview of various bike share systems
you want to head over to <a href="http://bikes.oobrien.com">Oliver O&#8217;Brien&rsquo;s excellent bike share map</a>.</p>

<h3>Bike Infrastructure</h3>

<p>The bike data we are using comes straight out of <a href="http://www.openstreetmap.org/search?query=vancouver%2C%20bc#map=12/49.2497/-123.1193">OpenStreetMap</a>.
That has some disadvantages as it can be less accurate
as the city bike data. But it also has a huge advantage. Anyone can edit OpenStreetMap to fix incorrect or missing
infrastructure designations. We kept some of the targeted editing capabilities intact on our map, if you view it on desktop
and <em>shift-click</em> anywhere, it will take you right into the OpenStreetMap editor at the position you clicked so you can
edit the infrastructure there.</p>

<p>If you are planning on helping out and improve OpenStreetMap bike data, you may want to read the
<a href="https://mapzen.com/blog/targeted-editing-cycleways/">excellent targeted editing post from Mapzen</a> and use their
<a href="https://mapzen-data.github.io/te-bike-lrm-mapzen/#point0lat=49.2820&amp;point0lng=-123.1204&amp;point1lat=49.2708&amp;point1lng=-123.1341&amp;mode=bicycle">map to brouse OSM tags</a>.
You may notice the similarity to our map, we borrowed heavily from that one. Updates you make will take between 1 to 4
hours before they percolate through into our map.</p>

<p>Data in OpenStreetMap is automatically accessible to other services too, so improving OSM will help out everyone. And not
just by making the maps better, routing gets better too!</p>

<p>And the other big advantage of OpenStreetMap is that our map is automatically global. Right now we still focus on
Vancouver, and we restrict the search function to Vancouver addresses. But in principle the infrastructure part of the
map works for anywhere on the planet.</p>

<h3>Next Steps</h3>

<p>Adding bike routing is an obvious next step. And there are lots of other refinements we can think of.</p>

<p>Hill shading has some issues right now, only some
hill aspects are visible right now. We may have to add some colour to hill shading to visualize all hill aspects better,
but that requires care to ensure the map retains it&rsquo;s clean looks.</p>

<p>The next step in the map evolution is to make a multi-modal map, toghet with multi-modal routing. The map will highlight
infrastructure based on what modes are preferred, and routing will do routing for these modes.</p>

<p>Using the great work of the <a href="https://bikeshare-research.org">Bike Share Research website</a> we can also parse the feeds
for all global bike share systems registered there and expand the bike share map to other systems around the world.</p>

<h3>Feedback</h3>

<p>Got ideas how to make the map better? Want some pointers how to adapt this map for your own purposes? Send us a tweet
or a message!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Global Bike Map]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map/"/>
    <updated>2016-05-16T21:39:07-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map</id>
    <content type="html"><![CDATA[<p><a href="http://doodles.mountainmath.ca/bike_global.html#14/49.2775/-123.1292" target="_blank"><img  src="http://doodles.mountainmath.ca/images/vancouver_bike.png"  style="width:50%;float:right;margin-left:10px;"></a>
Last week Mapzen <a href="https://twitter.com/mapzen/status/730782107685912576">announced</a> that they included bike data in their OSM vector tiles. That&rsquo;s just what the doctor ordered
to continue on my path towards the perfect bike map that I <a href="http://doodles.mountainmath.ca/blog/2015/12/13/how-to-make-a-bike-map/">started on</a>,
<a href="http://doodles.mountainmath.ca/blog/2015/12/14/routing/">explored routing</a> and <a href="http://doodles.mountainmath.ca/blog/2015/12/15/bike-data/">looked at improving OSM bike data</a>.
Now that I don&rsquo;t need to extract bike data myself any more it is time to take these maps global. And maybe add some minor
improvements.</p>

<!-- more -->


<p>To make the bike map boils down to deciding what OSM roads, paths, etc to map and how to map them. And what contextual
information to display. The only choices we have to make is how to organize the bike related data that exists in open street maps. Let&rsquo;s be a little
radical! Our emphasis will be on safety and cycling comfort for the casual rider.</p>

<p>We will emphasise separated cycletracks by making them brightest and thickest. Shared pedestrian/bike infrastructure will
get a separate colour and be a little bit thinner. Next we layer on designated bike infrastructure by prioritizing lanes
on residential roads, then &ldquo;shared&rdquo; residential roads, then residential roads, then lanes and &ldquo;shared&rdquo; designations on
increasingly busy roads. Lastly we add residential and larger roads. And we only label roads that we are actually interested in.</p>

<p>We allow some customization by emphasizing or de-emphasizing certain types of infrastructure. By default, roads without
special bike designation are de-emphasized.</p>

<p>For good measure we added basic land use categories to highlight possible destinations, and we add building footprints
for reference as available.</p>

<p>This scheme is geared toward the safety conscious and motor-traffic-adverse cyclist in North America. In Europe other
designations exist that might call for a different priority. MAMILs might want a different colour scheme altogether.</p>

<iframe src="http://doodles.mountainmath.ca/bike_global.html#14/49.2775/-123.1292" width="80%" height="450" style="margin: 5px 10%;"></iframe>


<p>To get a better view you can also
<a href="http://doodles.mountainmath.ca/bike_global.html" target="_blank" class='btn btn-default'>take the map full-screen</a>.</p>

<h3>Data Quality</h3>

<p>The data for the map comes right out of Open Streets Map. That means that if something is missing or not right you can
just go and fix it! To make things a little easier when you are on a desktop computer, just &ldquo;shift-click&rdquo; where the problem
is and it will bring the open street map editor up for that position. You might have to log in first or create a free
account before you can help improve the bike map.</p>

<p>There is a bit of a lag between changes being made in open street map and them filtering down to the mapzen tiles so that
they will show up on the map on the map, so don&rsquo;t fret if things aren&rsquo;t up to date immediately.</p>

<h3>Global</h3>

<p><a href="http://doodles.mountainmath.ca/bike_global.html#13/52.3617/4.9051" target="_blank"><img  src="http://doodles.mountainmath.ca/images/amsterdam_bike.png"  style="width:50%;float:left;margin-right:10px;"></a>
And this bike map is global. The quality of the map depends on the quality of OSM data, in the case of Amsterdam it makes
it abundantly clear why casual cyclists keep dreaming about the infrastructure in this city.</p>

<p>The choice of emphasis for the
maps are based on North America, or more narrowly Vancouver, where I live. So this might need adjusting for local context
to better fit local OSM conventions. Use the search bar and explore your region.</p>

<h3>The Real Deal</h3>

<p><a href="https://ride.report" target="_blank"><img  src="http://doodles.mountainmath.ca/images/ride_report.png"  style="width:50%;float:right;margin-left:10px;"></a>
Sadly, all of this effort is really coming at things from the wrong angle. The best way to do this,
<a href="http://doodles.mountainmath.ca/blog/2015/12/13/how-to-make-a-bike-map/">as we outlined earlier</a>, is to base a bike map
on how cyclists actually use the roads and pathways, instead of how they got classified in Open Street Map or what
municipalities think they should be classified. The problem is that we don&rsquo;t have that data. At least not yet. But
there are really cool efforts out there to get that data and make it available.</p>

<p>I really like the approach that <a href="https://ride.report" target="_blank">Ride Report</a> has taken. Strava works
reasonably well for recreational cyclists, but it does a terrible job at capturing where transportation cyclists go and
makes no effort in understanding their comfort level. Ride Report takes a different approach by automagically figuring
out what you are doing and recording your cycling trips. All without you ever having to press a &ldquo;start&rdquo; or &ldquo;stop&rdquo; button,
which is key if you want to understand where transportation cyclists go. On top of that it prompts you to simply rate your
bike trip once you are done, and you can do this easily from your lock screen. Then Ride Report aggregates the data
to produce stress maps, and possibly other important data that can guide infrastructure improvements.</p>

<p>In this day and age of data driven decision making I would really like more municipalities to support efforts like Ride Report
that generate real meaningful data on transportation cycling. And as a by-product one could take cycling maps to the
next level and add actual cycling usage and comfort.</p>

<h3>Issues</h3>

<p>There are still some issues. Some bike infrastructure, for example OSM paths, only become visible at zoom level 13 or higher.
That&rsquo;s just the way the vector tile service works. Secondary roads are only visible at zoom level 12 or higher, and this
includes &ldquo;bike boulevards&rdquo;. Cyclepaths are only visible at zoom level 11 or higher. If one wants to have high-level bike
maps one probably needs a dedicated vector tile service for bike infrastructure.</p>

<h3>Apologies</h3>

<p>Since this is just a blog post I have not gone out of my way to make sure this map works on every computer and browser.
Basically, I am leaveraging off of <a href="https://mapzen.com">Mapzen&rsquo;s</a> awesome <a href="https://mapzen.com/projects/tangram/">Tangram</a>
mapping engine to keep things simple on my end, but that means the maps will only show on modern computers
(and modern browsers, so no IE). If your computer is having trouble displaying the map just pull out your phone, chances
are it it is much better equipped to handle modern web technology.</p>

<p>Also, I made a bunch of choices how to display bike infrastructure. These are just a function of my personal preferences
and what OSM data has to offer. If you notice issues with the OSM data, you can fix it in OSM and it will show on the map
once the changes have filtered through to Mapzen&rsquo;s tile service. If you don&rsquo;t like my personal prefernces, just grab the
html for the map and the scene file and change it at your heart&rsquo;s content. You don&rsquo;t need any special server to host these
files, I dumped them on my static blog. Even a public dropbox folder can host these maps.</p>

<p>So grab the code and customize it at your heart&rsquo;s content. Take full control on how to display bike infrastructure and
roads, and what amenities to show and how to style them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Canvas vs SVG]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2015/12/27/canvas-vs-svg/"/>
    <updated>2015-12-27T15:53:02-08:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2015/12/27/canvas-vs-svg</id>
    <content type="html"><![CDATA[<h4>CensusMapper Behind the Scenes</h4>

<p>The idea behind <a href="https://censusmapper.ca">CensusMapper</a> is that it takes away all the technical barriers to dealing with census data. So how does
CensusMapper work behind the scenes?</p>

<h4>CensusMapper Data Workflow</h4>

<!-- more -->


<p>The general setup is quite simple. We use the lean javascript open mapping platform <a href="http://leafletjs.com">leaflet</a>
as the base for mapping information. Leaflet handles the logic of dealing with zoom and pan and keeping track of the
geographic boundaries that should be mapped. That information gets then passed on to the CensusMapper servers.</p>

<p>CensusMapper will then send the appropriate census geographic polygons to the browser for leaflet to display. Once the
geographic data is available for mapping, some custom code checks what kind of information the user wants to display and
requests the census data required to make the map. The census information is then assembled on the server, sent down
and attached to the polygons and drawn
on the browser window within leaflet. This two-tier process allows the highly dynamic mapping in CensusMapper where the
data-heavy geographic polygons are kept separately thus can be cached and re-used.</p>

<h4>Drawing Census Data</h4>

<p>There are a number of ways how we can display census data in the browser. At CensusMapper we have played with three
different technologies to map data that vary in performance and browser support. They all have in common that they
won&rsquo;t run on Internet Explorer 8 or earlier, but we have just about reached the point in time where it is acceptable to
ignore IE8- in products meant for the &ldquo;general internet audience&rdquo;.</p>

<h5>SVG</h5>

<p><a href="https://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</a> is what our maps have been using so far. SVGs are fairly high level, which means it&rsquo;s very little work
to implement and map information. One simply passes a polygon to the browser, tells it how to color it, and the browser
takes care of the rest. SVG elements can easily be styled via CSS, so there is essentially no work involved to deal with
highlight on hover, scaling for retina displays, patterns for census data quality flags, etc. We use
<a href="https://github.com/mbostock/d3">d3.js</a> to attach the geographic and census data right to the SVG elements for easy
manipulation.</p>

<p>While mapping data this way is very easy, for CensusMapper there are two problems.</p>

<ol>
<li>We are restricted in how we can display information by the capabilities of SVG.</li>
<li>SVG rendering is done by the browser, and not all browsers are equal. Most importantly, SVG rendering in Internet
Explorer is excruciatingly slow. So slow, that CensusMapper becomes essentially useless within Internet Explorer. We
felt compelled to add a warning messeage that displayed when people opened CensusMapper with Internet Explorer. And
when you do that, that&rsquo;s a sure sign that your app has a serious problem.
<img src="/images/chrome.png" alt="Browser Warning" />
So how to get around those issues? Enter Canvas.</li>
</ol>


<h5>Canvas</h5>

<p><a href="https://en.wikipedia.org/wiki/Canvas_element">Canvas</a> offers a way to draw images in a browser. Unlike SVG, the drawing has to be done &ldquo;by hand&rdquo;. And the result is just
an image, with no clear way to tell where it came from. There is no way to attach any information to individual
structures drawn on a canvas. All the logic for highlight on hover, figuring out what data is associated with the mouse
position, dealing with retina displays, etc. needs to be added by hand.</p>

<p>On the upside, a good canvas implementation is a lot faster than SVG. And it opens the door to changes in how the data
is handled that bring additional performance improvements. In particular, we can now chop up census polygons and render
the pieces separately, greatly cutting down on the size of the downloaded data, as well as the complexity of the
polygons that get rendered. And the performance improvements are noticeable across all browsers and platforms.</p>

<p>At the end of the day it is actually not that much work and we flipped the switch on this just before the Christmas
break. CensusMapper is now running using canvas instead SVG for
the main maps. We
kept the look and feel the same, so unless you dig into the code you won&rsquo;t notice the difference.
Some parts of CensusMapper still utilized SVGs, like the d3-based
<a href="http://doodles.mountainmath.ca/blog/2015/10/24/census-drilldown/">Census Wheel</a>.</p>

<h5>WebGL</h5>

<p><a href="https://en.wikipedia.org/wiki/WebGL">WebGL</a> also draws on a canvas element, but the work is offloaded onto the GPU (graphics processor) giving enormous
speed improvements. Regular canvas rendering is fast enough for our purposes, but with WebGL we can do more complex
renderings that previously we could not even dream of: <a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language">Shaders</a>
and Interactive 3D data maps. We had previously
<a href="https://mountainmath.ca/census3">toyed with 3D data visualization</a> to explore Vancouver&rsquo;s household density in 3D using Three.js,
but did not pursue this further because of the complexities of writing code for navigating a Canada-wide map. Then we came
across the super-customizable 3D open mapping platform built by <a href="https://mapzen.com/projects/tangram/">Mapzen</a>, and that
suddenly made it extremely easy to do interactive 3D data mapping live in the browser. A quick test
<a href="https://mountainmath.ca/vancouver_lidar/map">using Vancouver&rsquo;s open LIDAR generated building height data</a> showed how easy Mapzen&rsquo;s
tangram engine is to use.</p>

<p>After digging deeper into tangram, and with help from the friendly people at Mapzen, we figured out a way to fit
CensusMapper&rsquo;s two-stage data workflow into tangram&rsquo;s mapping engine. The result are real-time 3D maps where height
and color of each geographic area can be independently (and dynamically) controlled. Here is an example where mouseover
trigged the area west of Coal Harbor to &lsquo;pop up&rsquo;.
<img src="/images/webGL.jpg" alt="webGL" /></p>

<p>At the same time we gain the ability to easily pull in all kinds of other data and map it. On our canvas or svg maps we
added regular image tiles, either a road and label&rsquo;s overlay or a base map (which then requires opacity to be added to
the census data that is mapped on top of that) as orientation aid. Short of baking our own image tiles we have very
little control over the look and feel of this. With Mapzen&rsquo;s tangram we can very easily pick and style individual
geographic objects from Mapzen&rsquo;s OSM vector tile server, resulting in crisp and clear maps. In the above example we
decide dynamically what level of roads to render, how to style them, what labels to display and we also added bodies of
water, where we filter by size depending on the zoom level.</p>

<p>At this stage it is still an ongoing project to get this production-ready. One obvious obstacle is that WebGL browser
support is still lagging. And on top of that it also requires updated graphics card drivers, which is a big problem on
windows machines that are already a couple of years old. So for now we still need to have a plain canvas or svg fallback.</p>

<p>And then there are the details that need to get worked out. 3D maps sounds great, but it will take us some time to figure
out how to best utilize this in thematic maps. But even without utilizing 3D capabilities, the dynamic shaders and increased
rendering performance are already pushing the boundary of what&rsquo;s possible in web maps.</p>
]]></content>
  </entry>
  
</feed>
