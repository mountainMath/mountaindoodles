<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mapping | Mountain Doodles]]></title>
  <link href="http://doodles.mountainmath.ca/blog/categories/mapping/feed.atom" rel="self"/>
  <link href="http://doodles.mountainmath.ca/"/>
  <updated>2017-08-26T15:34:57-07:00</updated>
  <id>http://doodles.mountainmath.ca/</id>
  <author>
    <name><![CDATA[MountainMath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dot-density]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2017/08/24/dot-density/"/>
    <updated>2017-08-24T22:28:40-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2017/08/24/dot-density</id>
    <content type="html"><![CDATA[<p>I started writing this blog post in December 2015, when CensusMapper quite a bit younger and
I hacked together some basic dot-density maps. I never much liked the results and have been
slowly improving and thinking about them. I am still not entirely happy with the current
implementation, but it is slowly getting there. The final impulse to finsish this post was
the work on <code>cancensus</code>, and R wrapper for the CensusMapper API my explorations in multi-category
dot density maps in R, now tied up into the new <code>dotdensity</code> package.</p>

<h4>One person at a time</h4>

<p><img  src="http://doodles.mountainmath.ca/images/recent_immigrants_cropped.png" style="width:50%;float:right;margin-left:10px;">
Dot-density maps look pretty cool.
They have been <a href="https://www.google.com/search?q=dot-density+map+images&amp;client=safari&amp;rls=en&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;sa=X&amp;ved=0ahUKEwjuy9Ch6PjJAhUivXIKHWcvDb4QsAQIHA&amp;biw=1253&amp;bih=812">flying around the itnernet</a>
lately, so we have been thinking about how to offer them in CensusMapper.</p>

<p>So what&rsquo;s so great about dot-density maps? Essentially two things:</p>

<ol>
<li>They are very simple to interpret. One dot = one person is something everyone understands immediately.</li>
<li>They can show several variables at once, for example mapping recent immigrants by region of origin like above or
<a href="http://www.nytimes.com/interactive/2015/07/08/us/census-race-map.html">mapping ethnic segregation</a>.</li>
</ol>


<p>But once one looks closer there are lots of issues that need to be dealt with.</p>

<!-- more -->


<h4>The devil is in the details</h4>

<p>As simple as the the basic dot-density promise of <em>one dot = one person</em> is, it must fundamentally remain a lie for
census maps. We simply don&rsquo;t have the level of detail that the maps suggest. We don&rsquo;t know the location of people with
the accuracy depicted in the maps, and we certainly don&rsquo;t know the categories that give the color with the accuracy
suggested in the maps.</p>

<p>That&rsquo;s the most serious drawback of dot-density maps, they often suggest a level of detail that simply isn&rsquo;t there. Does
that outweigh the advantages? For that it is useful to take a quick look at the alternative that we have been using
at CensusMapper</p>

<h4>Choropleth Maps</h4>

<p>Choropleth maps are the staple of census maps. Every census region gets colored depending on a value of a census
variable (or function derived from census variables). While this is also quite simple, in practive there are a number of
problems with that:</p>

<ol>
<li><p>Low population bias. Let&rsquo;s look at an example to see how this works. Take a
<a href="http://censusmapper.ca/maps/132?zoom=12&amp;lat=49.2462&amp;lng=-123.0761">map of the percentage of children living in poverty</a>.
We immediately see where the percentage of child poverty is high. And child poverty is a problem. But what we don&rsquo;t see
is how many poor children live in each area. So while we see the relative magnitude, we don&rsquo;t see the absolute magnitude
of the problem. So for example the <a href="http://censusmapper.ca/maps/132?zoom=17&amp;lat=49.2647&amp;lng=-123.1429">DA north-west of Broadway and Fir</a>
sports 66.7% of children living in poverty, but there are only 30 children in the area, and the expected error due to statistical
rounding is 10%, let alone errors introduced by non-return bias or simple sampling error. The
<a href="http://censusmapper.ca/maps/132?zoom=17&amp;lat=49.2435&amp;lng=-123.1516">DA north-east of Arbutus and 33rd</a> has a similar rate
of 69.1%, but there are 345 children in that area. So when trying to understand child poverty in the west side of Vancouver
one should focus on the latter not the former, but on the map they appear identical. Dot-density maps do a much better
job at representing this properly as they would simply draw a dot for each child in poverty, contrasted by a dot for
each child not in poverty as <a href="http://censusmapper.ca/maps/216?zoom=13&amp;lat=49.2465&amp;lng=-123.1425">you can see here</a>. Another
way to deal with this issue is via <a href="http://doodles.mountainmath.ca/blog/2017/04/10/surprise/">a surprise map</a> which
we have explained <a href="http://doodles.mountainmath.ca/blog/2017/04/10/surprise/">in a previous post</a>.</p></li>
<li><p>Choropleth maps are difficult to understand. If you read this far you probably have dealt with a fair share of maps
and won&rsquo;t appreciate how some people struggle understanding these. But the amount of time I have spent explaining to
journalists what they see in the <a href="http://censusmapper.ca/maps/137">halloween map of trick or treat density</a> is (torturous)
testament of the difficulties people have with these kind of maps. I don&rsquo;t think I would have gotten any questions if I
had simply use <a href="https://censusmapper.ca/maps/804">the dot-density version</a> instead. However, this only works for the
trick-or-treat density map, not the trick-or-treat onslaught map.</p></li>
<li><p>One can only show one variable at a time. There are ways to stretch this a little, for example
<a href="http://andywoodruff.com/blog/value-by-alpha-maps/">value by alpha maps</a> are one way around this that tackle the population
bias. Another way is the <a href="http://censusmapper.ca/maps/162">RGB maps CensusMapper has</a>. But this does not exactly make it
easier to interpret. Dot-density versions of this is certainly <a href="http://censusmapper.ca/maps/202">easier to interpret</a>
plus one is not limited by the three categories of the RGB maps. We can even <a href="https://censusmapper.ca/maps/678">combine the CensusMapper 3 color mixing with
value-by-alpha</a> to also show density.</p></li>
</ol>


<h4>Dot-Density Maps</h4>

<p>One other big challenge with dot-density maps is that they are surprisingly hard to make. Right now we at CensusMapper
just have the bare minimum in place to produce these kind of maps: A way to randomly place the required number of dots
into each geographic region colored by the given categories. Just when I was about to try myself at dot-density maps I
saw a <a href="https://twitter.com/pwramsey/status/677502052210085888">helpful tweet</a> telling me exactly what to pay attention
to, so the implementation was quick and painless. &ndash; Well, not quite, I still had to deal with issues due to polygons
clipped server side and the fact that census areas are often multi-polygons. And one needs to be careful to employ random
rounding when scaling to more than one person per dot, standard rounding may introduce systematic errors.</p>

<h4>CensusMapper Dot-Density Issues</h4>

<p><a href="https://censusmapper.ca/maps/797#12/49.2430/-123.0103"><img  src="http://doodles.mountainmath.ca/images/recent_immigrants_da.png" style="width:50%;float:right;margin-left:10px;"></a>
1. Clipping. There are still some minor issues due to clipping that can lead to the number of dots being off by a small
proportion. I won&rsquo;t bore you with the technical details, but the good news is that it can be worked out at the expense
of adding some more custom code on the client.
2. Dynamic dot-value scaling. CensusMapper maps allow for zooming from country-level down to street level. The one dot
= one person paradigm does not work very well on all scales. Visually as well as computationally. The smallest unit to
draw is one pixel (or 1 quarter of a pixel on 2x retina displays), and at some point (at the
latest when having to draw 33 million dots randomly within different regions in Canada) your browser performance will
tank. To fix this we need to dynamically adjust the value of each dot. Instead of 1 dot = 1 person it will be 1 dot =
10 people at lower zoom levels. And at higher zoom levels at some point one dot will have to start to get larger to be
more visible. Dynamically changing scales can be confusing though. As we zoom we keep the size of each dot relative to
the map constant, but if we re-scale we change the size of each dot relative to the map scale to make it clearer to the user that
wer are rescaling.
<a href="https://censusmapper.ca/maps/797#10/49.2430/-123.0103"><img  src="http://doodles.mountainmath.ca/images/recent_immigrants_ct.png" style="width:50%;float:left;margin-right:10px;"></a>
3. Non-uniform distribution of population. The current code has the problem of placing the dots randomly in each census
geography regardles of where people actually live. This goes back to the fundamental issues that dot-density maps suggest
a level of precision that simply is not there. But it definitely is odd to see dots in the Pacific Spirit Park or
<a href="https://twitter.com/mikeklassen/status/684981658013990913">camping out on Burnaby Mountain</a>.
The good news is that there is a partial fix to this. We have population counts at a finer census geometry:
Census Blocks. And at the Census
Block level we see that nobody lives in the Pacific Spirit Park, or on most of Burnaby Mountain. So to fix this we
simply need to shift the way we decide what census geography to display. This is quite difficult to fix within the
CensusMapper paradigm of highly dynamic maps where nothing is pre-computed.
4. Visual feedback on hover / select. For choropleth maps we highlight regions on hover so that the user knows what geographic
area the variables in the legend and in the popup are for. This is something that is not too difficult to add, but we
will have to wait for the next bigger CensusMapper map refresh.</p>

<h4>Static dot-density maps</h4>

<p>Statis maps is one way where the above issues don&rsquo;t appear. And most importantly, we can fix issue 3. completely by
taking the time to weight the placement of dots by census block level data. The new
<a href="https://github.com/mountainMath/cancensus"><code>cancensus</code> R package</a> now makes it
super easy to import cenusus data into R, and we wrote a <a href="https://github.com/mountainMath/dotdensity"><code>dotdensity</code> R package</a>
to implement common functions that deal
with the usual pitfalls of multi-category dot-density maps. By moving from CensusMapper to R we trade the dynamic nature
of CensusMapper for crisper images and improved processing and dot-placement. Often we aren&rsquo;t interested in Canada-wide
maps that are the staple of CensusMapper, but only want to focus on one particular region. Or maybe a couple of regions,
and the <code>cancensus</code> and <code>dotdensity</code> packages still make it very easy to change the region and make the same map for a
different geographic region. Or make changes to the variables we want to map. In particular in conjunction with the
<a href="">CensusMapper API helper</a> that reduces the selection of geographies and variables to a couple of mouse clicks and
let&rsquo;s you copy and paste the R code to import the data through <code>cancensus</code>.</p>

<p>The dot-density package has two main functions that we use</p>

<p><code>dot_density.compute_dots</code> takes care of converting geographic shapes with counts for each category into dots. This
is fairly straight-forward, but we need to pay attention to two potential pitfalls.</p>

<ul>
<li>The order of the dots need to be
randomized so we don&rsquo;t draw all items of one particular category (colour) last, so that these end up on top and appear
more prominent than others.</li>
<li>When we scale so that 1 dot represents more than 1 unit in our category count, we need to employ statistical rounding,
not just regular rounding, otherwise the overall count of the dots may not represent the overall averages. To see this,
suppose we want to map German speakers, and we scale so that 1 dot corresponds to 50 German speakers. If German speakers
are uniformly distributed in each area so that there are 20 German speakers in each area, regular rounding will produce a
map without any German speakers at all. Statistical rounding will properly reflect the total number of German speakers,
but they will be randomly placed in each area. Not ideal, we probably should adjust our scale. But better than random
rounding. And adjusting the scale is not always an option, for example there might be one cluster of German speakers and a uniform
distribution everywhere else.</li>
</ul>


<p>The <code>dot_density.compute_dots</code> takes care of these issues under the hood. (And so does CensusMapper.)</p>

<p><code>dot_density.proportional_re_aggregate</code> takes two nested geographies, for example census subdivisions and census tracts. It will
compare counts across the geographic levels and adjust the lower-level geography counts with the more accurate higher-level data.
If lower level geographic data has been suppressed due to quality or privacy concerns the overall counts at that aggregation level
won&rsquo;t accurately reflect the overall data. The <code>dot_density.proportional_re_aggregate</code> will re-distribute the missing counts
proportionately among the lower level geographies, weighted appropriately.</p>

<p>The same function can also be used to weight the dots we want to draw by block level data, so this will produce maps that avoid
placing dots in parks or other unpopulated areas, spacing them according to population density at the block level.</p>

<h4>Examples</h4>

<p>When the data is easily accessible and well-organized, it is incredibly easy to run analysis or visualize it. In CensusMapper,
we can make dot-density maps within a matter of minutes, and with the <code>cancensus</code> and <code>dotdensity</code> packages it&rsquo;s no different in R.</p>

<p>Hear are a couple of examples, first from CensusMapper with links to the live maps, and then from the vignettes embedded into the R package.</p>

<h5>CensusMapper</h5>

<p>Occupied dwelling units by type
<a href="https://censusmapper.ca/maps/727#12/49.2719/-123.0967"><img  src="http://doodles.mountainmath.ca/images/dwellings-dot-density.png"></a></p>

<h5>R</h5>

<p>Language Spoken at Home
<img src="https://github.com/mountainMath/dotdensity/raw/master/images/vancouver-languages.png" alt="Languages" /></p>

<p>Household Size
<img src="https://github.com/mountainMath/dotdensity/raw/master/images/toronto-hh-size.png" alt="Household Size" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobi Running Stats]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/08/24/mobi-running-stats/"/>
    <updated>2016-08-24T09:45:54-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/08/24/mobi-running-stats</id>
    <content type="html"><![CDATA[<p><a href="http://mountainmath.ca/mobi#14.287582005629245/49.2742/-123.1277" target="_blank"><img  src="http://doodles.mountainmath.ca/images/mobi_main2.png"  style="width:50%;float:right;margin-left:10px;"></a>
I keep getting questions about Mobi stats these days. Rather than ansering them one by one I decided to just offer a live
view into data generated by our shadow API. I made two simple views, the most recent month of daily bike checkout counts
and the most recent week of hourly bike checkout counts. The data issues mentioned in our
<a href="http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look/">previous post</a> still apply. For data geeks, here is a link to a
<a href="https://twitter.com/serialc/status/767096443165376512">very useful paper</a> that compared estimates like I make to real
usage data.</p>

<!-- more -->


<p>Apart from the usual caveats when dealing with scraped data, Mobi data comes with additional issues like duplicate stations
that need to be filtered out to get proper counts. The view into the database below filters out these and other current
known issues with Mobi data. But as this is a live view, it might not correctly deal with future unforseen issues with
Mobi data. New stations, once Mobi adds them, will automatically show up on our Mobi map and will also be counted in the
live usage graphs.</p>

<h3>Daily Usage</h3>

<p>This graphs shows the daily total counts of bikes checked out (with the usual data quality caveats) for the past month
(starting from August 12, 2016).</p>

<div style="margin:5px  0 20px 0;padding:2px;border: 1px solid black;border-radius:5px;width:100%;">
  <div id="graph_daily" style="height:200px;" data-url="https://mountainmath.ca/bike_providers/1/daily.json"></div>
</div>


<h3>Hourly Usage</h3>

<p>This graphs shows the hourly total counts of bikes checked out (with the usual data quality caveats) for the past week.</p>

<div style="margin:5px  0 20px 0;padding:2px;border: 1px solid black;border-radius:5px;width:100%;">
  <div id="graph_hourly" style="height:200px;" data-url="https://mountainmath.ca/bike_providers/1/hourly.json"></div>
</div>


<h3>Auto Updating</h3>

<p>The above graphs are dynamic, they display the latest available numbers. Feel free do come back to this page to check
how usage develops over time. If you come back in one hour, it will have the latest hourly counts. If you come back
tomorrow, it will have an additional day of data.</p>

<h3>Map Update</h3>

<p>We also thought that adding a little more context to the <a href="http://mountainmath.ca/mobi">bike share map</a> would be useful,
so we added some gentle colouring to highlight parks, retail and institutional land uses.</p>

<p>The bike infrastructure
(and land use) data comes straight from OpenStreetMap. Everyone is
welcome to help update OpenStreetMap data. If you are on a desktop and shift-click into our map it will bring up the
OpenStreetMap editor. There you can add the newest separated bike lane or make other changes (after logging in or signing
up for an account). It will take between 1 to 5 hours for changes to go live on our map, and the changes you make will
also be available to any other app relying on OpenStreetMap data.</p>

<div><script>

function graphBikeStation(selector,station_id){
  var outerHeight=$(selector).height(),
      outerWidth=$($(selector)[0].parentNode).width();
  var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = outerWidth - margin.left - margin.right,
      height = outerHeight - margin.top - margin.bottom;

  var formatDate = d3.time.format("%X");
  var x = d3.time.scale()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis().scale(x).orient('bottom');

  var yAxis = d3.svg.axis().scale(y).orient('left').ticks(5);

  var line = d3.svg.line()
      .x(function(d) { return x(d.created_at); })
      .y(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');
  var bikeArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return y(d.available_bikes); })
      .y1(function(d) { return height; })
      .interpolate('step-after');
  var dockArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return 0; })
      .y1(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');


  var svg = d3.select(selector).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.json('http://mountainmath.ca/bike_providers/1/bike_stations/' + station_id + '.json?days=7',function(error,data){
  data=data[0].stations[0].statuses;
  data.forEach(function(d){type(d)});
  var last=data[data.length-1];
  var lastTime=new Date(d3.time.format.iso.parse(last.updated_at).getTime() + 5*60000);
  data.push({id:last.id,available_bikes:last.available_bikes,free_docks:last.free_docks,created_at:lastTime,updated_at:lastTime});

  x.domain(d3.extent(data, function(d) { return d.created_at; }));
  y.domain([0,data[0].available_bikes+data[0].free_docks]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//      .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Available Bikes");

  svg.append("path")
      .datum(data)
      .attr("class", "area bike")
      .style("fill",'rgba(33, 139, 51, 0.7)')
      .attr("d", bikeArea);
  svg.append("path")
      .datum(data)
      .attr("class", "area dock")
      .style("fill",'rgba(212, 10, 44, 0.7')
      .attr("d", dockArea);


  function type(d) {
    d.created_at = d3.time.format.iso.parse(d.created_at);
    d.available_bikes = +d.available_bikes;
    return d;
  }
  });
}



function bar_graph(div,shiftAxis,domainFormatter,rangeFormatter,domainLabelFormatter,rangeLabelFormatter){
    if (!domainFormatter) domainFormatter=d3.format("d");
    if (!rangeLabelFormatter) rangeLabelFormatter=rangeFormatter;
    if (!rangeFormatter)
     rangeFormatter = function (y) {
        return y;
     };
     if (!domainLabelFormatter) domainLabelFormatter=domainFormatter;

var margin = {top: 20, right: 20, bottom: 40, left: 70},
    width = parseInt(div.style("width")) - margin.left - margin.right,
    height = parseInt(div.style("height")) - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);


var xAxis = d3.svg.axis()
    .scale(x)
    .tickFormat(domainFormatter)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(rangeFormatter)
    .ticks(5, rangeFormatter);

var svg = div.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data_url=div[0][0].dataset.url;

d3.json(data_url, function(error, json) {
  if (error) throw error;
  var graphData=json[0];
  var data=graphData.data;
  
  //data.forEach(function(d,i){d.date= d3.time.format.iso.parse(d.date)});
  
  var container=d3.select(div.node().parentNode);
  container.selectAll('.legend.no-margin').remove();
  var legend=container.append('div').attr('class',"legend no-margin");
  legend.append('p').html('<i style="background:'+graphData.color + '"></i>' + graphData.label +  '<span style="float:right;margin-right:10px;" id="' + graphData.class+'_value"></span>');
  
  x.domain(data.map(function(d) {return d.date }));
  y.domain([0, d3.max(data, function(d) { return d.count; })]);
  
  var domainTickValues=[];
  var skip=Math.round(60/x.rangeBand());
  if (skip<=0) skip=1;
  for (var i=0;i<x.domain().length;i++) {
    if (i % skip==0) domainTickValues.push(x.domain()[i]);
  }
  //if (x.domain().length % 5 !=0) domainTickValues.push(x.domain()[x.domain().length-1]);
  xAxis.tickValues(domainTickValues);

  var xShift=shiftAxis ?  -x.rangeBand()/2.0 * 1.1 : 0;
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(" + xShift + "," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//    .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Probability");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", graphData.class + " bar")
      .style("fill", graphData.color)
      .attr("x", function(d) { return x(d.date); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); })
      .on('mouseover',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('click',function(d){
       d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('touch',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

      
});

}



var numberFormatter=d3.format(",");
var dateFormatter=function(d){return d};//d3.time.format("%a %I%p");//d3.time.format("%a %H:%M"); //d3.format(",");//
bar_graph(d3.select("#graph_daily"),false,dateFormatter,numberFormatter);
bar_graph(d3.select("#graph_hourly"),false,dateFormatter,numberFormatter);

graphBikeStation('#station_graph_os',1);
</script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobi -- a First Look]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look/"/>
    <updated>2016-08-16T13:06:58-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/08/16/mobi-a-first-look</id>
    <content type="html"><![CDATA[<p><a href="http://mountainmath.ca/mobi#14.287582005629245/49.2742/-123.1277" target="_blank"><img  src="http://doodles.mountainmath.ca/images/mobi_main.png"  style="width:50%;float:right;margin-left:10px;"></a>
Vancouver finally has a bikeshare system. And everyone is hoping it will succeed, despite the obstacles BC&rsquo;s mandatory
helmet law poses for the system. So we are eager to find out how things are going with Mobi.</p>

<p>To set the background, consider that
<a href="http://www.seattlemet.com/articles/2016/3/21/the-rise-and-fall-and-possible-rise-again-of-pronto">Seattle&rsquo;s Pronto is getting less than 1 ride per bike per day</a>
after half a year in operation. In comparison, bike shares that are considered &lsquo;successful&rsquo; in North America get 3 to 5
rides per bike per day. Taipei&rsquo;s system, which I am particularly fond of, gets over 11 rides per bike per day.</p>

<p>So how about Mobi? It barely started, and it&rsquo;s not really fair to run the numbers right now. But we just couldn&rsquo;t hold
our curiosity back.</p>

<!-- more -->


<h3>Data</h3>

<p>First off, some caveats. Mobi does not have an official API for their system. In fact, they only provide a barely usable
<a href="https://www.mobibikes.ca">map of station statuses at the bottom of their landing page</a>. So we decided to
jump in and scrape their data to <a href="http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map/">make our own map</a>. In
absence of better alternatives, the <em>official</em> Mobi smartphone app is still not released, the map has gotten quite popular.
And in absence of an official Mobi API there are now others, like <a href="http://transitapp.com/">TransitApp</a>, that are consuming our
<a href="http://mountainmath.ca/mobi/stations">station data shadow API</a>.</p>

<p>What that means in terms of data quality is that while we get fairly accurate station bike counts at about a 1-minute
interval, there are some issues with using the data for rigorous analysis. If a bike gets checked in while another one
gets checked out at about the same time there is a good chance that we will miss it. And we can&rsquo;t distinguish rebalancing
from a group of people checking out or dropping off a bunch of bikes at the same time. And we don&rsquo;t have individual bike
data to look at travel patterns, for example what popular trip patterns are. Moreover we currently don&rsquo;t collect and store
weather data, an important variable that should be included in any bike share analysis.</p>

<p>That pretty much rules out anything but high level analysis.</p>

<h3>Station History</h3>

<p>To get an initial idea we started to look at station history. We only started recording Saturday 13th. For the fun of it
we added one day history to our <a href="https://mountainmath.ca/mobi">Mobi bike station and bike infrastructure map</a>. Drop me
a line if you are interested in longer timeframes.</p>

<p>Taking a look at the daily overall usage patterns</p>

<div style="padding:2px;border: 1px solid black;border-radius:5px;">
<div id="graph_mobi_hourly" style="height:200px;max-width:640px;" data-url="/data/mobi_hourly.json"></div>
</div>


<p>things are pretty much as expected. Nice Gaussians for the weekend usage, and some commute spikes for the weekday usage.
Squinting really hard one might want to make out a slight lunchtime boost, we will have to collect more data to confirm
that.</p>

<p>Another thing we see is that usage seems to hit a low point around 4am, so that&rsquo;s a good time to divide up the days when
looking at daily usage. Adding up the rides we get around 1400 rides a day. At around 3am we detect 490 bikes in the
stations, so that makes about 3 rides per bike per day. On average. That a pretty impressive number for a system that is
just getting off the ground. And that&rsquo;s while still in &ldquo;members only&rdquo; mode. The nice weather has helped, but there is no
getting around the fact that Mobi is off to a great start!</p>

<p>Of course not every bike is getting 3 rides. Some get more, some get less. For example, a bike parked at the
<a href="http://mountainmath.ca/mobi#17/49.27147/-123.10407">Ontario &amp; Seawall</a> station has been very popular, here is live data
on the most recent days of usage.
 <div id="station_graph_os" style="height:150px;"></div></p>

<p><a href="http://mountainmath.ca/mobi#19/49.26084/-123.11418" target="_blank"><img  src="http://doodles.mountainmath.ca/images/yukon_12.png"  style="width:50%;float:right;margin-left:10px;"></a>
On the other hand, bikes at <a href="http://mountainmath.ca/mobi#19/49.26084/-123.11418">Yukon &amp; 12th</a> have been having a hard
time to find riders. Both stations are at the
current boundary of the system, it is hard to say what makes the difference. The particular location of the least used
station is sure to get some people talking.</p>

<p>Mobi is undoubtedly carefully
analyzing their station usage and incorporating that into their strategic planning how to expand their network. And
hopefully publish a useful API for all the data geeks out there.</p>

<div><script>

function graphBikeStation(selector,station_id){
  var outerHeight=$(selector).height(),
      outerWidth=$($(selector)[0].parentNode).width();
  var margin = {top: 20, right: 20, bottom: 30, left: 50},
      width = outerWidth - margin.left - margin.right,
      height = outerHeight - margin.top - margin.bottom;

  var formatDate = d3.time.format("%X");
  var x = d3.time.scale()
      .range([0, width]);

  var y = d3.scale.linear()
      .range([height, 0]);

  var xAxis = d3.svg.axis().scale(x).orient('bottom');

  var yAxis = d3.svg.axis().scale(y).orient('left').ticks(5);

  var line = d3.svg.line()
      .x(function(d) { return x(d.created_at); })
      .y(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');
  var bikeArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return y(d.available_bikes); })
      .y1(function(d) { return height; })
      .interpolate('step-after');
  var dockArea = d3.svg.area()
      .x(function(d, i) { return x(d.created_at); })
      .y0(function(d) { return 0; })
      .y1(function(d) { return y(d.available_bikes); })
      .interpolate('step-after');


  var svg = d3.select(selector).append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
  d3.json('http://mountainmath.ca/bike_providers/1/bike_stations/' + station_id + '.json?days=7',function(error,data){
  data=data[0].stations[0].statuses;
  data.forEach(function(d){type(d)});
  var last=data[data.length-1];
  var lastTime=new Date(d3.time.format.iso.parse(last.updated_at).getTime() + 5*60000);
  data.push({id:last.id,available_bikes:last.available_bikes,free_docks:last.free_docks,created_at:lastTime,updated_at:lastTime});

  x.domain(d3.extent(data, function(d) { return d.created_at; }));
  y.domain([0,data[0].available_bikes+data[0].free_docks]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//      .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Available Bikes");

  svg.append("path")
      .datum(data)
      .attr("class", "area bike")
      .style("fill",'rgba(33, 139, 51, 0.7)')
      .attr("d", bikeArea);
  svg.append("path")
      .datum(data)
      .attr("class", "area dock")
      .style("fill",'rgba(212, 10, 44, 0.7')
      .attr("d", dockArea);


  function type(d) {
    d.created_at = d3.time.format.iso.parse(d.created_at);
    d.available_bikes = +d.available_bikes;
    return d;
  }
  });
}



function bar_graph(div,shiftAxis,domainFormatter,rangeFormatter,domainLabelFormatter,rangeLabelFormatter){
    if (!domainFormatter) domainFormatter=d3.format("d");
    if (!rangeLabelFormatter) rangeLabelFormatter=rangeFormatter;
    if (!rangeFormatter)
     rangeFormatter = function (y) {
        return y;
     };
     if (!domainLabelFormatter) domainLabelFormatter=domainFormatter;

var margin = {top: 20, right: 20, bottom: 40, left: 70},
    width = parseInt(div.style("width")) - margin.left - margin.right,
    height = parseInt(div.style("height")) - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);


var xAxis = d3.svg.axis()
    .scale(x)
    .tickFormat(domainFormatter)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(rangeFormatter)
    .ticks(5, rangeFormatter);

var svg = div.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data_url=div[0][0].dataset.url;

d3.json(data_url, function(error, json) {
  if (error) throw error;
  var graphData=json[0];
  var data=graphData.data;
  
  data.forEach(function(d,i){d.date= d3.time.format.iso.parse(d.date)});
  
  var container=d3.select(div.node().parentNode);
  container.selectAll('.legend.no-margin').remove();
  var legend=container.append('div').attr('class',"legend no-margin");
  legend.append('p').html('<i style="background:'+graphData.color + '"></i>' + graphData.label +  '<span style="float:right;margin-right:10px;" id="' + graphData.class+'_value"></span>');
  
  x.domain(data.map(function(d) {return d.date }));
  y.domain([0, d3.max(data, function(d) { return d.count; })]);
  
  var domainTickValues=[];
  var skip=Math.round(60/x.rangeBand());
  if (skip<=0) skip=1;
  for (var i=0;i<x.domain().length;i++) {
    if (i % skip==0) domainTickValues.push(x.domain()[i]);
  }
  //if (x.domain().length % 5 !=0) domainTickValues.push(x.domain()[x.domain().length-1]);
  xAxis.tickValues(domainTickValues);

  var xShift=shiftAxis ?  -x.rangeBand()/2.0 * 1.1 : 0;
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(" + xShift + "," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//    .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Probability");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", graphData.class + " bar")
      .style("fill", graphData.color)
      .attr("x", function(d) { return x(d.date); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); })
      .on('mouseover',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('click',function(d){
       d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('touch',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeLabelFormatter(d.count)) 
      }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

      
});

}



var numberFormatter=d3.format(",");
var dateFormatter=d3.time.format("%a %I%p");//d3.time.format("%a %H:%M"); //d3.format(",");//
bar_graph(d3.select("#graph_mobi_hourly"),true,dateFormatter,numberFormatter);

graphBikeStation('#station_graph_os',1);
</script></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bike Share Map]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map/"/>
    <updated>2016-07-26T15:12:06-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/07/26/bike-share-map</id>
    <content type="html"><![CDATA[<p><a href="https://mountainmath.ca/mobi" target="_blank"><img  src="http://doodles.mountainmath.ca/images/bike-share-image-large.png"  style="width:50%;float:right;margin-left:10px;"></a>
It is no secret that we at MountainMath like bikes. And maps. And open data and sharing. We guess you know where
this is going.</p>

<p>Vancouver has finally gotten a bike share system, and we are loving it. So we took the occasion to take our
<a href="http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map/">old bike infrastructure maps</a>, polished them up a
bit using <a href="https://mapzen.com/blog/targeted-editing-cycleways/">Mapzen&rsquo;s bike map style</a> and adapted it for our purposes.</p>

<p>The result is our <a href="https://mountainmath.ca/mobi" class="btn btn-primary">Vancouver Bike Share Map</a>. (Fair
warning. While this map works great on your iOS and Android phone, it may not work on old desktop computers.)</p>

<p>Add it to your phone home screen, and it will be right at your fingertips when you need it!</p>

<!-- more -->


<p>And we threw the <a href="https://www.mobibikes.ca/">Mobi Bike Share</a> station data on top. That last part turned out a little
more messy than expected, the API that was <a href="https://bikeshare-research.org/#bssid:vancouver">linked at the Bike Share Research website</a>
is broken, and the Mobi redirects are malformed and no guesswork would yield a working API. Luckily
the <a href="https://twitter.com/oobr">bike share map wizard</a> on
Twitter <a href="https://twitter.com/oobr/status/756211668141547520">had the answer</a> how to tease out the station data. And some
of the stations are duplicate, so it took some time to clean up the data properly.</p>

<p>We tried to keep our map as simple as possible. This iteration highlights three types of infrastructure, separated, bike lanes and
shared lanes. The map has some hill-shading for reference, and at high zoom level it shows some bike points-of-interest.
The rest is kept clean and simple.</p>

<p>For the stations, we weren&rsquo;t fans of the icons and presentation used on many other maps. We decided on a simple
donut-style presentation to visualize available bikes to check out and empty slots to return them. This is the most crucial
information for a bike share user. Where can I check out a bike, and where can I return one. There is nothing more frustrating
than having to go to a meeting and being unable to check the bike back into a station because it is full. The map gives
a quick visual guide for this, although the Mobi data lags quite a bit right now. Hopefully that will change in the future
once they get their API up and running.</p>

<p>On touch/hover the bike stations expand to give exact counts and the station name. Station sizes vary and counts can be
useful at times. We opted to keep the icon size independent of station size, trading added information for a cleaner
presentation by only revealing it on user interaction.</p>

<p>This map focuses on the bike share user. If you are more interested in stats and overview of various bike share systems
you want to head over to <a href="http://bikes.oobrien.com">Oliver O&#8217;Brien&rsquo;s excellent bike share map</a>.</p>

<h3>Bike Infrastructure</h3>

<p>The bike data we are using comes straight out of <a href="http://www.openstreetmap.org/search?query=vancouver%2C%20bc#map=12/49.2497/-123.1193">OpenStreetMap</a>.
That has some disadvantages as it can be less accurate
as the city bike data. But it also has a huge advantage. Anyone can edit OpenStreetMap to fix incorrect or missing
infrastructure designations. We kept some of the targeted editing capabilities intact on our map, if you view it on desktop
and <em>shift-click</em> anywhere, it will take you right into the OpenStreetMap editor at the position you clicked so you can
edit the infrastructure there.</p>

<p>If you are planning on helping out and improve OpenStreetMap bike data, you may want to read the
<a href="https://mapzen.com/blog/targeted-editing-cycleways/">excellent targeted editing post from Mapzen</a> and use their
<a href="https://mapzen-data.github.io/te-bike-lrm-mapzen/#point0lat=49.2820&amp;point0lng=-123.1204&amp;point1lat=49.2708&amp;point1lng=-123.1341&amp;mode=bicycle">map to brouse OSM tags</a>.
You may notice the similarity to our map, we borrowed heavily from that one. Updates you make will take between 1 to 4
hours before they percolate through into our map.</p>

<p>Data in OpenStreetMap is automatically accessible to other services too, so improving OSM will help out everyone. And not
just by making the maps better, routing gets better too!</p>

<p>And the other big advantage of OpenStreetMap is that our map is automatically global. Right now we still focus on
Vancouver, and we restrict the search function to Vancouver addresses. But in principle the infrastructure part of the
map works for anywhere on the planet.</p>

<h3>Next Steps</h3>

<p>Adding bike routing is an obvious next step. And there are lots of other refinements we can think of.</p>

<p>Hill shading has some issues right now, only some
hill aspects are visible right now. We may have to add some colour to hill shading to visualize all hill aspects better,
but that requires care to ensure the map retains it&rsquo;s clean looks.</p>

<p>The next step in the map evolution is to make a multi-modal map, toghet with multi-modal routing. The map will highlight
infrastructure based on what modes are preferred, and routing will do routing for these modes.</p>

<p>Using the great work of the <a href="https://bikeshare-research.org">Bike Share Research website</a> we can also parse the feeds
for all global bike share systems registered there and expand the bike share map to other systems around the world.</p>

<h3>Feedback</h3>

<p>Got ideas how to make the map better? Want some pointers how to adapt this map for your own purposes? Send us a tweet
or a message!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Global Bike Map]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map/"/>
    <updated>2016-05-16T21:39:07-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/05/16/my-global-bike-map</id>
    <content type="html"><![CDATA[<p><a href="http://doodles.mountainmath.ca/bike_global.html#14/49.2775/-123.1292" target="_blank"><img  src="http://doodles.mountainmath.ca/images/vancouver_bike.png"  style="width:50%;float:right;margin-left:10px;"></a>
Last week Mapzen <a href="https://twitter.com/mapzen/status/730782107685912576">announced</a> that they included bike data in their OSM vector tiles. That&rsquo;s just what the doctor ordered
to continue on my path towards the perfect bike map that I <a href="http://doodles.mountainmath.ca/blog/2015/12/13/how-to-make-a-bike-map/">started on</a>,
<a href="http://doodles.mountainmath.ca/blog/2015/12/14/routing/">explored routing</a> and <a href="http://doodles.mountainmath.ca/blog/2015/12/15/bike-data/">looked at improving OSM bike data</a>.
Now that I don&rsquo;t need to extract bike data myself any more it is time to take these maps global. And maybe add some minor
improvements.</p>

<!-- more -->


<p>To make the bike map boils down to deciding what OSM roads, paths, etc to map and how to map them. And what contextual
information to display. The only choices we have to make is how to organize the bike related data that exists in open street maps. Let&rsquo;s be a little
radical! Our emphasis will be on safety and cycling comfort for the casual rider.</p>

<p>We will emphasise separated cycletracks by making them brightest and thickest. Shared pedestrian/bike infrastructure will
get a separate colour and be a little bit thinner. Next we layer on designated bike infrastructure by prioritizing lanes
on residential roads, then &ldquo;shared&rdquo; residential roads, then residential roads, then lanes and &ldquo;shared&rdquo; designations on
increasingly busy roads. Lastly we add residential and larger roads. And we only label roads that we are actually interested in.</p>

<p>We allow some customization by emphasizing or de-emphasizing certain types of infrastructure. By default, roads without
special bike designation are de-emphasized.</p>

<p>For good measure we added basic land use categories to highlight possible destinations, and we add building footprints
for reference as available.</p>

<p>This scheme is geared toward the safety conscious and motor-traffic-adverse cyclist in North America. In Europe other
designations exist that might call for a different priority. MAMILs might want a different colour scheme altogether.</p>

<iframe src="http://doodles.mountainmath.ca/bike_global.html#14/49.2775/-123.1292" width="80%" height="450" style="margin: 5px 10%;"></iframe>


<p>To get a better view you can also
<a href="http://doodles.mountainmath.ca/bike_global.html" target="_blank" class='btn btn-default'>take the map full-screen</a>.</p>

<h3>Data Quality</h3>

<p>The data for the map comes right out of Open Streets Map. That means that if something is missing or not right you can
just go and fix it! To make things a little easier when you are on a desktop computer, just &ldquo;shift-click&rdquo; where the problem
is and it will bring the open street map editor up for that position. You might have to log in first or create a free
account before you can help improve the bike map.</p>

<p>There is a bit of a lag between changes being made in open street map and them filtering down to the mapzen tiles so that
they will show up on the map on the map, so don&rsquo;t fret if things aren&rsquo;t up to date immediately.</p>

<h3>Global</h3>

<p><a href="http://doodles.mountainmath.ca/bike_global.html#13/52.3617/4.9051" target="_blank"><img  src="http://doodles.mountainmath.ca/images/amsterdam_bike.png"  style="width:50%;float:left;margin-right:10px;"></a>
And this bike map is global. The quality of the map depends on the quality of OSM data, in the case of Amsterdam it makes
it abundantly clear why casual cyclists keep dreaming about the infrastructure in this city.</p>

<p>The choice of emphasis for the
maps are based on North America, or more narrowly Vancouver, where I live. So this might need adjusting for local context
to better fit local OSM conventions. Use the search bar and explore your region.</p>

<h3>The Real Deal</h3>

<p><a href="https://ride.report" target="_blank"><img  src="http://doodles.mountainmath.ca/images/ride_report.png"  style="width:50%;float:right;margin-left:10px;"></a>
Sadly, all of this effort is really coming at things from the wrong angle. The best way to do this,
<a href="http://doodles.mountainmath.ca/blog/2015/12/13/how-to-make-a-bike-map/">as we outlined earlier</a>, is to base a bike map
on how cyclists actually use the roads and pathways, instead of how they got classified in Open Street Map or what
municipalities think they should be classified. The problem is that we don&rsquo;t have that data. At least not yet. But
there are really cool efforts out there to get that data and make it available.</p>

<p>I really like the approach that <a href="https://ride.report" target="_blank">Ride Report</a> has taken. Strava works
reasonably well for recreational cyclists, but it does a terrible job at capturing where transportation cyclists go and
makes no effort in understanding their comfort level. Ride Report takes a different approach by automagically figuring
out what you are doing and recording your cycling trips. All without you ever having to press a &ldquo;start&rdquo; or &ldquo;stop&rdquo; button,
which is key if you want to understand where transportation cyclists go. On top of that it prompts you to simply rate your
bike trip once you are done, and you can do this easily from your lock screen. Then Ride Report aggregates the data
to produce stress maps, and possibly other important data that can guide infrastructure improvements.</p>

<p>In this day and age of data driven decision making I would really like more municipalities to support efforts like Ride Report
that generate real meaningful data on transportation cycling. And as a by-product one could take cycling maps to the
next level and add actual cycling usage and comfort.</p>

<h3>Issues</h3>

<p>There are still some issues. Some bike infrastructure, for example OSM paths, only become visible at zoom level 13 or higher.
That&rsquo;s just the way the vector tile service works. Secondary roads are only visible at zoom level 12 or higher, and this
includes &ldquo;bike boulevards&rdquo;. Cyclepaths are only visible at zoom level 11 or higher. If one wants to have high-level bike
maps one probably needs a dedicated vector tile service for bike infrastructure.</p>

<h3>Apologies</h3>

<p>Since this is just a blog post I have not gone out of my way to make sure this map works on every computer and browser.
Basically, I am leaveraging off of <a href="https://mapzen.com">Mapzen&rsquo;s</a> awesome <a href="https://mapzen.com/projects/tangram/">Tangram</a>
mapping engine to keep things simple on my end, but that means the maps will only show on modern computers
(and modern browsers, so no IE). If your computer is having trouble displaying the map just pull out your phone, chances
are it it is much better equipped to handle modern web technology.</p>

<p>Also, I made a bunch of choices how to display bike infrastructure. These are just a function of my personal preferences
and what OSM data has to offer. If you notice issues with the OSM data, you can fix it in OSM and it will show on the map
once the changes have filtered through to Mapzen&rsquo;s tile service. If you don&rsquo;t like my personal prefernces, just grab the
html for the map and the scene file and change it at your heart&rsquo;s content. You don&rsquo;t need any special server to host these
files, I dumped them on my static blog. Even a public dropbox folder can host these maps.</p>

<p>So grab the code and customize it at your heart&rsquo;s content. Take full control on how to display bike infrastructure and
roads, and what amenities to show and how to style them.</p>
]]></content>
  </entry>
  
</feed>
