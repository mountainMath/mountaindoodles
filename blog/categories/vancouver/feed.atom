<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vancouver | Mountain Doodles]]></title>
  <link href="http://doodles.mountainmath.ca/blog/categories/vancouver/feed.atom" rel="self"/>
  <link href="http://doodles.mountainmath.ca/"/>
  <updated>2016-01-19T23:38:04-08:00</updated>
  <id>http://doodles.mountainmath.ca/</id>
  <author>
    <name><![CDATA[MountainMath]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Teardowns]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/01/18/redevelopment/"/>
    <updated>2016-01-18T09:52:33-08:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/01/18/redevelopment</id>
    <content type="html"><![CDATA[<p><a href="https://mountainmath.ca/map/special/17"><img  src="http://doodles.mountainmath.ca/images/teardowns.png" style="width:50%;float:left;margin-right:10px;"></a>
On the heels of the <a href="http://doodles.mountainmath.ca/blog/2016/01/17/updated-vancouver-assessment-data/">new assessment data</a> we
can start to slice the data in different ways to understand various aspects of the real estate landscape in Vancouver. The
fact that <a href="http://vancouver.ca/your-government/open-data-catalogue.aspx">Vancouver Open Data</a> makes historic data available
gives the ability to look for changes over time.</p>

<p><a href="https://mountainmath.ca/map/assessment">Our maps</a> explore this by visualizing some aspects of these changes for all
properties, but it might also be useful to filter the properties we show to focus in on specific criteria.</p>

<p>&ldquo;Teardowns&rdquo; always triggers lots of emotions in Vancouver. Without looking at the eomtional side and trying to avoid any
judement we will
investigate the data to undestand what buildings have been torn down recently and predict which buildings will get torn
down next. And map them. Long story short, we predict that
1 in 6 buildings <a href="https://mountainmath.ca/map/special/17">on this map</a> (and then some more with lower teardown probability)
will get torn down and rebuilt by 2026.</p>

<h3>Building age temporal distribution</h3>

<!-- more -->


<p>To start understanding teardowns and rebuilds let&rsquo;s look at the <a href="https://mountainmath.ca/map/assessment?layer=7">age of the building stock</a>.</p>

<p>To get a better overview of the building stock through time we can graph the number of buildings by age. We look at buildings, not units. So a stratified
building with 100 units would still count as one building in our graph. And it is not looking at how many buildings were
built in each year, but how many buildings that were built in a given year are still standing today.</p>

<p>We still have 7 buildings in Vancouver that were built before 1900 (the earliest from 1800). Skipping these we graph the
rest to get:</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_age" style="height:200px;max-width:640px;" data-url="/data/building_age.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> Number of Buildings by Building Age <span style="float:right;margin-right:10px;" id="building_age_value"></span></p>
</div>
</div>


<p>Starting with 1950 the distribution of buildings by age is quite uniform, with a short peak around the early 1990s.</p>

<p>The dip at the end is due to some lag in new buildings showing up in the property dataset. Looking at the more recent history
it is safe to assume that the number of buildings still standing corresponds well to the buildings of units built in that year.
So the pace of new buildings right now seems to fit in quite well with the recent history and is a little lower than the
peak in the early 1990s.</p>

<h3>Recent Building stock (and recent teardowns) spatial distribution</h3>

<p><a href="https://mountainmath.ca/map/special/15"><img  src="http://doodles.mountainmath.ca/images/rebuilds.png" style="width:50%;float:right"></a>
The next question is to focus in at the spatial distribution of recent redevelopment by filtering out older buildings.
Being too lazy to add a bush for dynamic selection of time ranges I just made a static (in time) view only showing the
<a href="https://mountainmath.ca/map/special/15?zoom=13">6883 properties built after 2006</a>. It is quite safe to assume that most
of those new buildings replaced older ones that were torn down. So this map of new buildings is also a map of locations
of buildings that were torn down in the last 10 years.</p>

<p>What&rsquo;s interesting is when selecting
<a href="https://mountainmath.ca/map/special/15?zoom=16&amp;lat=49.2341&amp;lng=-123.1824&amp;layer=4">relative building value view</a> that
there are some properties that have been recently re-developed with increadibly low building value, like the property
at 5649 Dunbar St. This gives a window into some of the imperfections of the BC Assessment process where the building
value after re-development is not properly reflected in their dataset.</p>

<p>It also shows that recent building (or teardown) activity is fairly uniform across the city, with only some areas standing out as having little
development like the West End, parts of Kitsilano and Strathcona.</p>

<h3>What gets torn down and rebuilt next?</h3>

<p>The big question is of course where new buildings get built next. In a built up space like Vancouver there are few sites
left where building a new building does not mean tearing down an old one. So another way to ask that question is: What
gets torn down next?</p>

<h3>Teardown Probability</h3>

<p>Predicting which building will get torn down next is of course impossible. So what we try to do is assign a &ldquo;teardown
probability&rdquo; to each building.</p>

<p>Let&rsquo;s first try to understand why a particular building might get torn down as opposed to the one next door. Typically
buildings get torn down at the time when they change ownership. So if a building is not sold, it is far less likely to
get torn down. So what makes a building more likely to get torn down when it is sold? One hypothesis would be that the
value of the building relative to the land should play an important factor. Let&rsquo;s test this hypothesis using the data.</p>

<p>We take the 2006 tax dataset as a baseline and check how many of the buildings have been torn down by 2016. There is some
messiness in the data, to make things simple and clean we take all properties in the 2006 dataset that are marked as
having been built no later than 2006 (some are not marked at all and some are marked as being built after 2006). We only
count buildings, so we count a strata lot with 100 units in the same building as one building. Then we use the 2016 dataset
to check how many of them are still around, identifying them by their tax coordinate and again asking they be marked as
being built no later than 2006.</p>

<p>These criteria capture well what we are looking for, but they are not perfect. I won&rsquo;t bore you with the details stemming
from the intricacies of the dataset.</p>

<p>Next we sort the properties by their building value to total value percentage, the &ldquo;teardown coefficient&rdquo; using the
2006 tax assessment data and we check how each group fares.</p>

<p>First up a graph of the distribution of buildigs in 2006 by their <em>teardown coefficient</em>.</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_buildings_by_teardown" style="height:200px;max-width:640px;" data-url="/data/buildings_by_teardown.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> Number of Buildings by *teardown coefficient* <span style="float:right;margin-right:10px;" id="buildings_by_teardown_value"></span></p>
</div>
</div>


<p>Next up the number of buildings in each category that got torn down:</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_teardowns" style="height:200px;max-width:640px;" data-url="/data/teardowns.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> Number of Torn Down Buildings by *teardown coefficient* <span style="float:right;margin-right:10px;" id="teardowns_value"></span></p>
</div>
</div>


<p>We see that our initial hypothesis seems to hold up quite well. The number of buildings that got torn down and rebuilt
decreases as the <em>teardown coefficient</em> increases. Remember that we defined the <em>teardown coefficient</em> to be the percentage
of the building value out of the total value of the property.</p>

<p>Refer to the methodology and data section for further information on how these numbers were extracted.</p>

<p>To explore this further let&rsquo;s graph the frequency with which a building in a given <em>teardown coefficeint</em> range gets torn down.
To keep things cleaner where we only plot up to a <em>teardown coefficient</em> of 50%:</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_teardown_probability" style="height:200px;max-width:640px;" data-url="/data/teardown_probability.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> Probability of Building being torn down<span style="float:right;margin-right:10px;" id="teardown_probability_value"></span></p>
</div>
</div>


<p>We see that the <em>teardown coefficient</em> has high predictive value for a building to be torn down and
being rebuilt in the following 10 years. Buildings with a <em>teardown coefficient</em> below 5% have about an 18% chance, and the
probability declines exponentially down to zero at a <em>teardown coefficient</em> of about 50%.</p>

<p>If we were more serious about this
we would fit and exponential curve to the data and compute how well it fits the data, repeat the computation for
other time frames, run it on individual neighbourhoods and maybe also on <a href="https://data.surrey.ca">data from other municipalities</a>
to properly validate our model. We could also refine the model by refining our filters, see the methodology and data section for
more details.</p>

<p>And we could add other factors that likely effect the teardown probability, like building age, proximity to arterials and
others. Of course these are not independent factors, so this kind of analysis requires more care.</p>

<h3>Predicting Teardowns</h3>

<p>Now to the main part: Predicting teardowns. How many buildings will get torn down and rebuilt in the next 10 years? Let&rsquo;s
use what we have just learned to extrapolate.</p>

<p>First up the graph of the 2016 building stock by <em>teardown coefficient</em>:</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_buildings_by_teardown_2" style="height:200px;max-width:640px;" data-url="/data/buildings_by_teardown_2.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> 2016 Building stock by *teardown coefficient* <span style="float:right;margin-right:10px;" id="buildings_by_teardown_2_value"></span></p>
</div>
</div>


<p>To estimate how many buildings will get torn down and rebuilt in each category we simply multiply each bin with the teardown probability
from the frequency graph above:</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph_teardowns_2" style="height:200px;max-width:640px;" data-url="/data/teardowns_2.json"></div>
<div class="legend no-margin">
  <p><i style="background:steelblue"></i> Estimate of Buildings rebuilt by 2026 <span style="float:right;margin-right:10px;" id="teardowns_2_value"></span></p>
</div>
</div>


<p>Bottom line, we predict around 8,000 buildings to be torn down and rebuilt by 2026. That&rsquo;s significantly more than the
around 5,900 buildings that we identified as going through this process during the prior 10 years.</p>

<h3>Mapping Teardowns</h3>

<p><a href="https://mountainmath.ca/map/special/17"><img  src="http://doodles.mountainmath.ca/images/teardowns.png" style="width:50%;float:right"></a>Now that we
understand how to assign a teardown probability to buildings, let&rsquo;s map them! To keep things as simple as
possible let&rsquo;s focus in on the homes with a <em>teardown coefficient</em> below 5%. They make up the bulk in our prediction and
have the simple interpretation that a little more than 1 in 6 of these will get replaced by something else by 2026. So
<a href="https://mountainmath.ca/map/special/17">here is the interactive map</a> of just these 31301 buildings. And this only accounts
for the 5,700 buildings predicted to be torn down with a <em>teardown coefficient</em> below 5% cutoff and neglects the roughly 2,000 more that
are predicted to be torn down that have a <em>teardown coefficient</em> above 5%.</p>

<h3>Methodology and Data</h3>

<p>Only for people who love getting their hands dirty or who want to reproduce or expand on the analysis.</p>

<p>First thing to note is that there is no way to detect &ldquo;teardowns&rdquo; in the dataset, the only way is to look at what has been
rebuilt and what has &lsquo;dropped off&rsquo;. To be more precise, there data fields to look at is the &ldquo;land coordinate&rdquo;, which links
a taxable property to a physical structure, and the &ldquo;year built&rdquo;. And both fields have problems.</p>

<p>The &ldquo;land coordinate&rdquo;
gets de-commissioned and re-assigned during certain re-develpments. And the city dataset provides no way to link the
old one to the new one. One way to do that is through the polygons that mark the property boundaries, that would allow
tracking of complex re-assemblies of land. But the city does not publish historic records of property polygons.</p>

<p>The &ldquo;year built&rdquo; also has lots of issues. Sometimes it is blank even though it records the value of the building as
greater than zero. Sometimes the &ldquo;year built&rdquo; will be set to a date later than the date of the dataset, for example the
2006 tax dataset has buildings with &ldquo;year built&rdquo; all they way up to 2013.</p>

<p>Then comes the issue of filtering. We decided to filter out parks, rail lines and marinas without structures on them. The
algorithm is somewhat simplistic, it&rsquo;s the same one that was used to filter properties for the maps. Additionally we
filter out properties from the heritage dataset. There is definitely
room for improvement here, but without a clear question of what exactly to measure
(only single family homes, or also condos or apartements, treat commercial separately, &hellip;)
it does not make much sense to invest energy into this. After all, this is just looking for a rough model.</p>

<p>So how do we detect rebuilds? We take the land coordinates from properties identified as park or heritage and sieve through
the 2006 tax data to retrieve all records that don&rsquo;t match these land coordinates and have a &ldquo;year built&rdquo; column set
as 2006 or earlier or don&rsquo;t have a &ldquo;year built&rdquo; set at all but change from zero to non-zero building value from 2006 to 2016.</p>

<p>Pretty messy. We mapped <a href="https://mountainmath.ca/map/special/15">about 6,900 buildings were built after 2006</a>,
but only traced 5,869 buildings in the 2006 tax dataset as
being torn down and rebuilt. That difference is largely explained by different selection criteria. The map only considers
properties with a &ldquo;year built&rdquo; field set, but for the analysis we also added properties that don&rsquo;t have that field set
but go from zero building value in 2006 to non-zero building value in 2016 which gets us to 7,784 &ldquo;rebuilds&rdquo;. On the other hand
in the analysis we don&rsquo;t consder the roughly 140 heritage buildings that would pass our filter of being built after 2006, and
the 2016 tax dataset has 2,422 more buildings than the 2006 dataset. Without going further down this messy road, rest
be assured that the numbers somehow add up.</p>

<p>Anyway, if you want to get your hand dirty on this shoot me a message and I will hook you up with my scripts.</p>

<script>


function bar_graph(div,shiftAxis,domainFormatter,rangeFormatter,domainLabelFormatter){
    if (!domainFormatter) domainFormatter=d3.format("d")
    if (!rangeFormatter)
     rangeFormatter = function (y) {
        return y;
     };
     if (!domainLabelFormatter) domainLabelFormatter=domainFormatter;

var margin = {top: 20, right: 20, bottom: 40, left: 70},
    width = parseInt(div.style("width")) - margin.left - margin.right,
    height = parseInt(div.style("height")) - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);


var xAxis = d3.svg.axis()
    .scale(x)
    .tickFormat(domainFormatter)
    .orient("bottom");


var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(rangeFormatter)
    .ticks(5, rangeFormatter);

var svg = div.append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var data_url=div[0][0].dataset.url;

d3.json(data_url, function(error, json) {
  if (error) throw error;
  var graphData=json[0];
  var data=graphData.data;
  x.domain(data.map(function(d) { return d.date }));
  y.domain([0, d3.max(data, function(d) { return d.count; })]);
  
  var domainTickValues=[];
  var skip=Math.round(40/x.rangeBand());
  if (skip<=0) skip=1;
  for (var i=0;i<x.domain().length;i++) {
    if (i % skip==0) domainTickValues.push(x.domain()[i]);
  }
  if (x.domain().length % 5 !=0) domainTickValues.push(x.domain()[x.domain().length-1]);
  xAxis.tickValues(domainTickValues);

  var xShift=shiftAxis ?  x.rangeBand()/2.0 * 1.1 : 0;
  
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(" + xShift + "," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
//    .append("text")
//      .attr("transform", "rotate(-90)")
//      .attr("y", 6)
//      .attr("dy", ".71em")
//      .style("text-anchor", "end")
//      .text("Probability");

  svg.selectAll(".bar")
      .data(data)
    .enter().append("rect")
      .attr("class", graphData.class + " bar")
      .attr("fill", graphData.color)
      .attr("x", function(d) { return x(d.date); })
      .attr("width", x.rangeBand())
      .attr("y", function(d) { return y(d.count); })
      .attr("height", function(d) { return height - y(d.count); })
      .on('mouseover',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeFormatter(d.count)) 
      }).on('click',function(d){
       d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeFormatter(d.count)) 
      }).on('touch',function(d){
         d3.select('#'+this.classList[0]+'_value').text(domainLabelFormatter(d.date) + ': ' + rangeFormatter(d.count)) 
      }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

      
});

function type(d) {
  d.frequency = +d.frequency;
  return d;
}
}

var ready_for_graph = function(graphs,domainFormatter,numberFormatter) {
    var d3lines=[];
    var padding = {top: 20, right: 20, bottom: 30, left: 90};
    var prevChartWidth = 0, prevChartHeight = 0;
    var updateTransistionMS = 750; // milliseconds
    var sourceData, lineData, xScale, yScale, line;

    var symbol;
    var prefix;
    if (!domainFormatter) domainFormatter=d3.format("d")
    if (!numberFormatter)
     numberFormatter = function (y) {
        return y;
     };

    //var graphs=d3.select("#graph");
    var div=graphs[0][0];
    if (div==null|| div.childElementCount!=0) {return;}
    var data_url=div.dataset.url;

    // create svg and g to contain the chart contents
    var baseSvg = graphs.append("svg");
    var chartSvg=baseSvg
        .append("g")
        .attr("class", "chartContainer")
        .attr("transform", "translate(" + padding.left + "," + padding.top + ")");

    // create the x axis container
    chartSvg.append("g")
        .attr("class", "x axis");

    // create the y axis container
    chartSvg.append("g")
        .attr("class", "y axis");
    var line;
    var largest=null;
    var lineData;
    if (div.dataset.lines) {
        d3.json(div.dataset.lines,function(error,json){
        lineData=json;
        var domain=[null,null];
        var range=[null,null];
        for (var i=0;i<lineData.length;i++){
            lineData[i].data.forEach(function(d) {
                d.date = +d.date;
                d.count = +d.count;
                if (domain[0]==null || domain[0]> d.date) domain[0]= d.date;
                if (domain[1]==null || domain[1]< d.date) domain[1]= d.date;
                if (range[0]==null || range[0]> d.count) range[0]= d.count;
                if (range[1]==null || range[1]< d.count) range[1]= d.count;
            });
        }
        xScale=d3.scale.linear().domain(domain);
        var toAdd=(range[1]-range[0])/10;
        range[0]-=toAdd;
        range[1]+=toAdd;
        yScale=d3.scale.linear()
            .domain(range);

        line = d3.svg.line()
            .x(function(d) { return xScale(d.date); })
            .y(function(d) { return yScale(d.count); })
            .interpolate("linear");

        xAxis = d3.svg.axis()
            .scale(xScale)
            .orient("bottom")
            .tickFormat(domainFormatter)
            .tickValues(domain);

        yAxis = d3.svg.axis()
            .scale(yScale)
            .orient("left")
            .tickFormat(numberFormatter)
            .ticks(5);

        prefix = d3.formatPrefix(range[1]);
        if (prefix.symbol=='K') {
            symbol='k'
        } else if (prefix.symbol=='M') {
                symbol='m'
        } else if (prefix.symbol=='G') {
            symbol='bn'
        } else if (prefix.symbol=='T') {
            symbol='tn'
        }
        updateChart(true);
        });

    }


    function updateChart(init)
    {
        // get the height and width subtracting the padding
//    var innerHeight = window.innerHeight - 20;
        var innerWidth = window.innerWidth - 20;
        var divWidth=$(div).width();
        if (divWidth==0) divWidth=$(div.parentElement.parentElement).width();
        var maxWidth=parseInt($(div).css('max-width'));
        if (divWidth==0) divWidth=innerWidth*0.8;
        if (divWidth>maxWidth) divWidth=maxWidth;
        var chartWidth = divWidth-padding.left-padding.right;//960 - margin.left - margin.right,
        var chartHeight = $(div).height()-padding.top-padding.bottom;//500 - margin.top - margin.bottom;


        // only update if chart size has changed
        if ((prevChartWidth != chartWidth) ||
            (prevChartHeight != chartHeight)) {
            prevChartWidth = chartWidth;
            prevChartHeight = chartHeight;

            //set the width and height of the SVG element
            chartSvg.attr("width", chartWidth + padding.left + padding.right)
                .attr("height", chartHeight + padding.top + padding.bottom);
            baseSvg.attr("width", chartWidth + padding.left + padding.right)
                .attr("height", chartHeight + padding.top + padding.bottom);

            // ranges are based on the width and height available so reset
            xScale.range([0, chartWidth]);
            yScale.range([chartHeight, 0]);

            if (init) {
                // if first run then just display axis with no transition
                chartSvg.select(".x")
                    .style({ 'stroke': 'grey', 'fill': 'none', 'stroke-width': '1px'})
                    .attr("transform", "translate(0," + chartHeight + ")")
                    .call(xAxis);

                chartSvg.select(".y")
                    .style({ 'stroke': 'grey', 'fill': 'none', 'stroke-width': '1px'})
                    .call(yAxis);
            }
            else {
                // for subsequent updates use a transistion to animate the axis to the new position
                var t = chartSvg.transition().duration(updateTransistionMS);

                t.select(".x")
                    .attr("transform", "translate(0," + chartHeight + ")")
                    .call(xAxis);

                t.select(".y")
                    .call(yAxis);
            }

            for (var i = 0; i < lineData.length; i++) {
                var sourceData=lineData[i].data;
                var color=lineData[i].color;
                var label=lineData[i].label;
                var className=lineData[i].class;

                // bind up the data to the line
                var lines = chartSvg.selectAll("path.line."+className)
                    .data([lineData[i].data]); // needs to be an array (size of 1 for our data) of arrays

                // transistion to new position if already exists
                lines.transition()
                    .duration(updateTransistionMS)
                    .attr("d", line);

                // add line if not already existing
                lines.enter().append("path")
                    .attr("class", "line")
                    .attr("stroke", color)
                    .attr("stroke-width", 2)
                    .attr('fill','none')
                    .attr("d", line);

                // bind up the data to an array of circles
                var circle = chartSvg.selectAll("circle."+className)
                    .data(sourceData);

                // if already existing then transistion each circle to its new position
                circle.transition()
                    .duration(updateTransistionMS)
                    .attr("cx", function (d) {
                        return xScale(d.date);
                    })
                    .attr("cy", function (d) {
                        return yScale(d.count);
                    });

                // if new circle then just display
                circle.enter().append("circle")
                    .attr("cx", function (d) {
                        return xScale(d.date);
                    })
                    .attr("cy", function (d) {
                        return yScale(d.count);
                    })
                    .attr("r", 3)
                    .attr('fill', 'transparent')
                    .style("stroke", color)
                    .style("stroke-width", 6)
                    .attr("class", className)
                    .on('mouseover',function(d){
                       d3.select('#'+this.classList[0]+'_value').text(domainFormatter(d.date) + ': ' + numberFormatter(d.count)) 
                    }).on('click',function(d){
                     d3.select('#'+this.classList[0]+'_value').text(domainFormatter(d.date) + ': ' + numberFormatter(d.count)) 
                    }).on('touch',function(d){
                       d3.select('#'+this.classList[0]+'_value').text(domainFormatter(d.date) + ': ' + numberFormatter(d.count)) 
                    }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

            }
        }
    }

    // look for resize but use timer to only call the update script when a resize stops
    var resizeTimer;
    window.onresize = function(event) {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function()
        {
            updateChart(false);
        }, 100);
    }


};
var percentageFormatter=d3.format(".1%");
var binFormatter=function(d){return percentageFormatter(d-0.025) + ' - ' + percentageFormatter(d);}
//ready_for_graph(d3.select("#graph"));
bar_graph(d3.select("#graph_age"),false);
//ready_for_graph(d3.select("#graph_buildings_by_teardown"),percentageFormatter);
//ready_for_graph(d3.select("#graph_teardowns"),percentageFormatter);
bar_graph(d3.select("#graph_buildings_by_teardown"),true,percentageFormatter,null,binFormatter);
bar_graph(d3.select("#graph_teardowns"),true,percentageFormatter,null,binFormatter);
bar_graph(d3.select("#graph_teardown_probability"),true,percentageFormatter,percentageFormatter,binFormatter);
bar_graph(d3.select("#graph_buildings_by_teardown_2"),true,percentageFormatter,null,binFormatter);
bar_graph(d3.select("#graph_teardowns_2"),true,percentageFormatter,null,binFormatter);
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated Vancouver Assessment Data]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2016/01/17/updated-vancouver-assessment-data/"/>
    <updated>2016-01-17T11:34:09-08:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2016/01/17/updated-vancouver-assessment-data</id>
    <content type="html"><![CDATA[<p><a href="https://mountainmath.ca/map/assessment?layer=4"><img  src="http://doodles.mountainmath.ca/images/relative_land.jpg" style="width:50%;float:right"></a>
The friendly folks at
<a href="http://vancouver.ca/your-government/open-data-catalogue.aspx">Vancouver Open Data</a> just
<a href="https://twitter.com/VanOpenData/status/688060388190097408">updated their property assessment data</a> with the fresh 2016
property tax assessments. Time to run the script to update the <a href="https://mountainmath.ca/map/assessment">Vancouver Assessment Map</a>
with the new data. And for good measure I pasted over some of the thematic map engine from <a href="https://censusmapper.ca">CensusMapper</a>
to improve the mapping performance.</p>

<h4>Maps</h4>

<!-- more -->


<p><img  src="http://doodles.mountainmath.ca/images/map_menu.png" style="width:25%;margin-left:5px;float:right">The <a href="https://mountainmath.ca/map/assessment">interactive assessment map</a> offers several views. In the panel on the top
right we can select how to view the data. It offers standard thematic maps for value change, total value, building value
and building age and zoning. And there are some options that warrant more explanation:</p>

<ul>
<li><a href="https://mountainmath.ca/map/assessment?layer=5"><em>Relative Land Value</em>:</a> The colours on the map show each property by the
land value per m&sup2;. We can immediately spot the east-west land gradient, as well as how zoning affects land value.
When zooming in we also see the effect of lot size on land value.</li>
<li><a href="https://mountainmath.ca/map/assessment?layer=10"><em>Tax Density</em>:</a> This map looks at the tax dollars collected
by the city by area. It tells us the relative rate at what each property is contributing to city services. We can again
observe the impact of exclusionary zoning.</li>
<li><a href="https://mountainmath.ca/map/assessment?layer=4"><em>Relative Value of Building</em>:</a>
<a href="https://mountainmath.ca/map/assessment?layer=4"><img  src="http://doodles.mountainmath.ca/images/teardown.jpg" style="width:50%;float:right"></a>
This map simply divides the building value
by the total property value. There are many ways to interpret this map, my favourite is to use this as a &ldquo;Teardown Predictor&rdquo;.
Essentially, as the percentage of the building value approaches zero the probability that it will get torn down in the
near future increases. Imagine someone spending $1.5m to buy a property with a house valued at $37k. Many people don&rsquo;t
mind living in a house worth $37k, but someone who is spending $1.5m would probably prefer to buy a different property
with a higher quality house. Or spend more money to upgrade the house. How will it be upgraded? Renovating is in most
cases economically unsound, most people will choose to tear down and rebuild. In fact, the <em>teardown threshold</em> is
likely higher than the 2.5% in the example given. The percentage of properties in Vancouver where the building value is
less than 2.5% of the total value has slightly decreaed in the last year from 17.9% to 17.8%, but the percentage of properties
with building value less than 5% of the total value has increased from 32% to 33.5% during the last year.</li>
</ul>


<h4>The Data</h4>

<p>The data originates with BC Assessment, which estimates land and building values of each property based on recent sales
of comparable properties. The assessment was done in summer 2015 and is based on sales before that, so at this point in
time the data lags the market by about one year. Values for individual properties may well be off, depending how well
renovations and improvements were reported and how well the BC Assessment estimates work for the given property. On
average they should reflect the market about half a year to one year ago.</p>

<p>Sadly, BC Assessment does not give out their data with a license that would allow mapping it the way I do, so we have
to rely on municipalities to release it through their open data portals. The format of the data from each municipality is
different, so lazy me is only importing data from City of Vancouver, although some other nearby municipalities are also releasing
there data.</p>

<p>The motivation behind the map was to understand the building stock. Some effort was made to filter out parks, but the
algorithm is far from perfect and will often includes parks that host building
structures, as well as marinas with structures on them.</p>

<p>The new city dataset does not include the 2016 tax levy, so we still only show the 2015 tax levies until CoV updated their dataset.</p>

<h4>History</h4>

<p>Here is a quick history of the overall land and building values aggregated for Vancouver between 2006 and 2016.</p>

<div style="margin:10px 50px;padding:5px;border: 1px solid black;border-radius:5px;">
<div id="graph" style="height:200px;max-width:640px;" data-lines="/data/vancouver_stats.json"></div>
<div class="legend no-margin">
  <p><i style="background:blue"></i> Land Value <span style="float:right;margin-right:10px;" id="land_value"></span></p>
  <p><i style="background:green"></i> Building Value <span style="float:right;margin-right:10px;" id="building_value"></span></p>
</div>
</div>


<p>When looking at all properties in the city, the increase in land
value year over year was 21.4% ($45.2bn), while overall building values increased by 7.3% ($5bn). Hover, click or touch
the points in the graph to get the values for the corresponding year.</p>

<h4>Neighbourhoods</h4>

<p>Lastly a quick overview over the neighbourhoods. Land and building values have not increased evenly throughout in the year.
I aggregated all tax data by neighbourhood and split it into land value and building value increases.
These numbers should be used as guidance only, they mix lots of different types of properties and include parks.</p>

<p>Here is the breakdown by neighbourhood:</p>

<ul>
<li>Renfrew-Collingwood: Land: 30.6% ($1.2bn), Building: 5.8% ($46.0m)</li>
<li>Sunset: Land: 26.6% ($1.6bn), Building: 5.9% ($74.2m)</li>
<li>Oakridge: Land: 17.6% ($1.2bn), Building: 12.6% ($207.4m)</li>
<li>Downtown: Land: 16.9% ($0.8bn), Building: 3.2% ($91.2m)</li>
<li>Kerrisdale: Land: 18.7% ($1.3bn), Building: 3.3% ($54.1m)</li>
<li>Victoria-Fraserview: Land: 28.0% ($1.5bn), Building: 5.6% ($65.2m)</li>
<li>Grandview-Woodland: Land: 24.9% ($1.7bn), Building: 0.7% ($17.4m)</li>
<li>West End: Land: 22.6% ($2.5bn), Building: 3.5% ($188.4m)</li>
<li>Hastings-Sunrise: Land: 25.1% ($1.1bn), Building: 4.9% ($63.8m)</li>
<li>Killarney: Land: 17.8% ($0.3bn), Building: 14.1% ($241.6m)</li>
<li>Marpole: Land: 17.8% ($0.3bn), Building: 14.1% ($241.6m)</li>
<li>Kitsilano: Land: 21.6% ($3.3bn), Building: 4.3% ($134.5m)</li>
<li>Shaughnessy: Land: 18.6% ($1.7bn), Building: 7.4% ($117.7m)</li>
<li>West Point Grey: Land: 20.2% ($2.3bn), Building: 5.2% ($88.3m)</li>
<li>Fairview: Land: 19.4% ($2.0bn), Building: -1.0% (-$52.4m)</li>
<li>Downtown Eastside: Land: 21.9% ($2.6bn), Building: 4.9% ($194.9m)</li>
<li>Kensington-Cedar Cottage: Land: 24.9% ($1.7bn), Building: 0.7% ($17.4m)</li>
<li>Riley Park: Land: 26.4% ($1.0bn), Building: 4.0% ($40.2m)</li>
<li>Mount Pleasant: Land: 21.9% ($2.6bn), Building: 4.9% ($194.9m)</li>
<li>South Cambie: Land: 20.9% ($1.5bn), Building: 21.4% ($268.1m)</li>
<li>Strathcona: Land: 21.9% ($2.6bn), Building: 4.9% ($194.9m)</li>
<li>Dunbar Southlands: Land: 21.8% ($1.0bn), Building: 11.2% ($126.6m)</li>
<li>Arbutus Ridge: Land: 21.4% ($1.6bn), Building: 1.1% ($17.3m)</li>
</ul>


<p>It becomes immediately clear that the increase in property values is mostly driven by land, note that total value increases
for land and buildings are reported in billions and millions, respectively. The building stock does not
have time to catch up, with the exception of South Cambie. Fairview stands out with declining overall building values.</p>

<script>
var ready_for_graph = function() {
    var d3lines=[];
    var padding = {top: 20, right: 20, bottom: 30, left: 90};
    var prevChartWidth = 0, prevChartHeight = 0;
    var updateTransistionMS = 750; // milliseconds
    var sourceData, lineData, xScale, yScale, line;

    var symbol;
    var prefix;
    var numberFormatter = function (y) {
        return '$' + Math.round(prefix.scale(y*10))/10.0 + symbol;
    };

    var graphs=d3.select("#graph");
    var div=graphs[0][0];
    if (div==null|| div.childElementCount!=0) {return;}
    var data_url=div.dataset.url;

    // create svg and g to contain the chart contents
    var baseSvg = graphs.append("svg");
    var chartSvg=baseSvg
        .append("g")
        .attr("class", "chartContainer")
        .attr("transform", "translate(" + padding.left + "," + padding.top + ")");

    // create the x axis container
    chartSvg.append("g")
        .attr("class", "x axis");

    // create the y axis container
    chartSvg.append("g")
        .attr("class", "y axis");
    var line;
    var largest=null;
    var lineData;
    if (div.dataset.lines) {
        d3.json(div.dataset.lines,function(error,json){
        lineData=json;
        var domain=[null,null];
        var range=[null,null];
        for (var i=0;i<lineData.length;i++){
            lineData[i].data.forEach(function(d) {
                d.date = +d.date;
                d.count = +d.count;
                if (domain[0]==null || domain[0]> d.date) domain[0]= d.date;
                if (domain[1]==null || domain[1]< d.date) domain[1]= d.date;
                if (range[0]==null || range[0]> d.count) range[0]= d.count;
                if (range[1]==null || range[1]< d.count) range[1]= d.count;
            });
        }
        xScale=d3.scale.linear().domain(domain);
        var toAdd=(range[1]-range[0])/10;
        range[0]-=toAdd;
        range[1]+=toAdd;
        yScale=d3.scale.linear()
            .domain(range);

        line = d3.svg.line()
            .x(function(d) { return xScale(d.date); })
            .y(function(d) { return yScale(d.count); })
            .interpolate("linear");

        xAxis = d3.svg.axis()
            .scale(xScale)
            .orient("bottom")
            .tickFormat(d3.format("d"))
            .tickValues(domain);

        yAxis = d3.svg.axis()
            .scale(yScale)
            .orient("left")
            .tickFormat(numberFormatter)
            .ticks(5);

        prefix = d3.formatPrefix(range[1]);
        if (prefix.symbol=='K') {
            symbol='k'
        } else if (prefix.symbol=='M') {
                symbol='m'
        } else if (prefix.symbol=='G') {
            symbol='bn'
        } else if (prefix.symbol=='T') {
            symbol='tn'
        }
        updateChart(true);
        });

    }


    function updateChart(init)
    {
        // get the height and width subtracting the padding
//    var innerHeight = window.innerHeight - 20;
        var innerWidth = window.innerWidth - 20;
        var divWidth=$(div).width();
        if (divWidth==0) divWidth=$(div.parentElement.parentElement).width();
        var maxWidth=parseInt($(div).css('max-width'));
        if (divWidth==0) divWidth=innerWidth*0.8;
        if (divWidth>maxWidth) divWidth=maxWidth;
        var chartWidth = divWidth-padding.left-padding.right;//960 - margin.left - margin.right,
        var chartHeight = $(div).height()-padding.top-padding.bottom;//500 - margin.top - margin.bottom;


        // only update if chart size has changed
        if ((prevChartWidth != chartWidth) ||
            (prevChartHeight != chartHeight)) {
            prevChartWidth = chartWidth;
            prevChartHeight = chartHeight;

            //set the width and height of the SVG element
            chartSvg.attr("width", chartWidth + padding.left + padding.right)
                .attr("height", chartHeight + padding.top + padding.bottom);
            baseSvg.attr("width", chartWidth + padding.left + padding.right)
                .attr("height", chartHeight + padding.top + padding.bottom);

            // ranges are based on the width and height available so reset
            xScale.range([0, chartWidth]);
            yScale.range([chartHeight, 0]);

            if (init) {
                // if first run then just display axis with no transition
                chartSvg.select(".x")
                    .style({ 'stroke': 'grey', 'fill': 'none', 'stroke-width': '1px'})
                    .attr("transform", "translate(0," + chartHeight + ")")
                    .call(xAxis);

                chartSvg.select(".y")
                    .style({ 'stroke': 'grey', 'fill': 'none', 'stroke-width': '1px'})
                    .call(yAxis);
            }
            else {
                // for subsequent updates use a transistion to animate the axis to the new position
                var t = chartSvg.transition().duration(updateTransistionMS);

                t.select(".x")
                    .attr("transform", "translate(0," + chartHeight + ")")
                    .call(xAxis);

                t.select(".y")
                    .call(yAxis);
            }

            for (var i = 0; i < lineData.length; i++) {
                var sourceData=lineData[i].data;
                var color=lineData[i].color;
                var label=lineData[i].label;
                var className=lineData[i].class;

                // bind up the data to the line
                var lines = chartSvg.selectAll("path.line."+className)
                    .data([lineData[i].data]); // needs to be an array (size of 1 for our data) of arrays

                // transistion to new position if already exists
                lines.transition()
                    .duration(updateTransistionMS)
                    .attr("d", line);

                // add line if not already existing
                lines.enter().append("path")
                    .attr("class", "line")
                    .attr("stroke", color)
                    .attr("stroke-width", 2)
                    .attr('fill','none')
                    .attr("d", line);

                // bind up the data to an array of circles
                var circle = chartSvg.selectAll("circle."+className)
                    .data(sourceData);

                // if already existing then transistion each circle to its new position
                circle.transition()
                    .duration(updateTransistionMS)
                    .attr("cx", function (d) {
                        return xScale(d.date);
                    })
                    .attr("cy", function (d) {
                        return yScale(d.count);
                    });

                // if new circle then just display
                circle.enter().append("circle")
                    .attr("cx", function (d) {
                        return xScale(d.date);
                    })
                    .attr("cy", function (d) {
                        return yScale(d.count);
                    })
                    .attr("r", 4)
                    .attr('fill', 'transparent')
                    .style("stroke", color)
                    .style("stroke-width", 8)
                    .attr("class", className)
                    .on('mouseover',function(d){
                       d3.select('#'+this.classList[0]+'_value').text(d.date + ': ' + numberFormatter(d.count)) 
                    }).on('click',function(d){
                     d3.select('#'+this.classList[0]+'_value').text(d.date + ': ' + numberFormatter(d.count)) 
                    }).on('touch',function(d){
                       d3.select('#'+this.classList[0]+'_value').text(d.date + ': ' + numberFormatter(d.count)) 
                    }).on('mouseout',function(){d3.select('#'+this.classList[0]+'_value').text('')});

            }
        }
    }

    // look for resize but use timer to only call the update script when a resize stops
    var resizeTimer;
    window.onresize = function(event) {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(function()
        {
            updateChart(false);
        }, 100);
    }


};
ready_for_graph();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Hidden Mortgage]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2015/08/25/the-hidden-mortgage/"/>
    <updated>2015-08-25T23:18:12-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2015/08/25/the-hidden-mortgage</id>
    <content type="html"><![CDATA[<p>Some months ago I did a little side project and put some Census Canada data for Vancouver
<a href="https://mountainmath.ca/census">on an interactive map</a> online. After it generated quite some interest, to a large part
due to Ian Young&rsquo;s reporting
<a href="http://www.scmp.com/comment/blogs/article/1851003/bizarro-vancouver-25000-households-declare-less-income-they-spend">utilizing some of the data in the South China Morning Post</a>,
I talked to my friend Alejandro and we decided to set up a Census Mapper that allowes laymen to map any census variables
of their choosing Canada wide.</p>

<p>Since this is only a side project, it will take some time to set this up properly. In the meantime, I get to have some
fun to play with census data and map some variables of my choosing.</p>

<p>For a sneak preview of what the Census Mapper will be able to do read below the fold. No interaction, no chosing your
own variables and panning around Canada yet. Just some screenshots with a story to tie them together.</p>

<!-- more -->


<h3>Census Mapper Sneak Preview</h3>

<p>One of my many pet pieves has been the Drive Until You Qualify phrase. The idea is that you buy the house closest to your
place of work for which the bank will aprrove a loan. The obvious problem with this is that your commuting costs will
go up the further away from work you live &ndash; and you disposable income goes down accordingly. But the bank does not
seem to be bothered by that at all and often does not get much attention by househunting families either.</p>

<p>The fix? Easy. The cost of commuting and housing should not be separated by viewed in concert with one another.
People househunting right will have to do this based on their individual parameters, but let&rsquo;s take a look at what
choices people have made in the past based on Census Canada&rsquo;s 2011 NHS data.</p>

<h4>Dwelling Value</h4>

<p>In mapping terms, let&rsquo;s start with the map of Median Dwelling Values around Vancouver, taken from the NHS. Although
a little dated, it still serves to make the basic point.</p>

<p><img src="/images/dwelling_value.jpg" alt="&quot;Median Dwelling Value&quot;" /></p>

<p>The image is the familiar one, homes are expensive on the west side, a little less so toward the east. In Vancouver
proper the downtown area is somewhat affordable with prices dipping below $300,000 for the median dwelling. We are
considering the whole range, one bedroom condos all the way up to single family homes.</p>

<h4>Commute Time</h4>

<p>Next up, how much time to these people spend commuting? The NHS got you covered.</p>

<p><img src="/images/commute_time.jpg" alt="&quot;Median One Way Commute Time&quot;" /></p>

<p>The median one-way commute time give us a picture of how much time people spend to go to work. And we will assume they
spend the same time coming back.</p>

<p>How much does it cost to commute. We will think of the commute cost as being made up of two components. The money
spent to get to and from work and the dollar value of the time. That leaves us with two more questions. How much money
do people spent and how much is their time worth.</p>

<h4>Transportation Cost</h4>

<p>Luckily, again the NHS has something to say about this. To figure out the money spent on the commute we look at the mode
of transport. NHS tell us how many people drive, are passengers, take transit, cycle or walk to work. To keep things
simple we will compute the &lsquo;median commute cost&rsquo; by setting transit cost at $120 per month (roughly the price for a
2-zone transit pass) and for driving we set the car2go rate of 41c/min (which is quite generous, most people will spent
more if they own a car, and pay for gas, insurance, parking themselves and spent time to maintain it). For simplicit we
set the cost for passengers, cyclists and pedestrians at zero. So we sum over the number of drivers and transit users
and divide by the total number of commuters in each dissemination area to estimate that cost. Generally speaking it
turns out to be much smaller than the &lsquo;time cost&rsquo; calculated next.</p>

<h4>Time Cost</h4>

<p>To compute the &lsquo;time cost&rsquo; of commuting for the average person in each dissemination area we need to know what people&rsquo;s
time is worth. The NHS has a simple answer for that, the Median After Tax Household Income.</p>

<p><img src="/images/median_after_tax_income.jpg" alt="&quot;Median After Tax Household Income&quot;" /></p>

<p>We estimate the median annual time cost of the commute by taking the ratio of the daily commute time to the daily work time,
assumed to be eight hours, and multiplying it by the annual after tax income. That&rsquo;s more or less the money the average
person in that dissemination area makes in the time the person spent commuting. If there are several people in the
household contributing to the income, there will be several people spending time
commuting, so that effect roughly cancels out.</p>

<h4>Annual Commute Cost</h4>

<p>Putting it together we get the annual cost of the commute map.</p>

<p><img src="/images/commute_cost.jpg" alt="&quot;Annual Cost of Commute&quot;" /></p>

<p>This is only an estimate. From a technical perspective we probably should have been working with averages instead of
median values, but the result is very similar. Translating between time and money is inherintly tricky, most people can&rsquo;t
easily scale up or down the time they spent working to translate time into money. The easiest way to think of this is
someone who tries to work less hours (and get less pay) in order to spend more time with their family. One way to do
exactly that is to cut down on commute time.</p>

<h4>The Hidden Mortgage</h4>

<p>Now it&rsquo;s time to tie this back up with the price for housing. After all, the time you spent on your commute and your
mode choice for that commute, are intimately tied to where you choose to live. How do we combine the commute cost with
the housing cost?
As a rule of thumb, one makes $400 monthly payments for each $100,000 of mortgage. Give or take, but our numbers are
quite rough anyway. So taking the annual commute cost, dividing by 400 and multiplying by 100,000 we get the &lsquo;commute
cost mortgage equivalent&rsquo;. If we map it it looks the same as the previous map, just with different labels. But since I
like maps, here it is.</p>

<p><img src="/images/commute_mortgage_equivalent.jpg" alt="&quot;Commute Mortgage Equivalent&quot;" /></p>

<p>In other words, we translated the commute cost into &lsquo;hidden mortgage&rsquo; payments. Except, unlike a real mortgage, paying
it off does not generate any value for you.</p>

<h4>Combined Dwelling Value and Commute Cost</h4>

<p>Finally we have all we need for the end result. The Combined Dwelling Value and Commute Time/Mode Value Map where we
simply add the estimated commute mortgage cost onto the dwelling value.</p>

<p><img src="/images/combined_dwelling_commute.jpg" alt="&quot;Combined Dwelling Value And Commute Cost&quot;" /></p>

<p>It does not look radically different from the dwelling value map. It&rsquo;s almost the same around downtown where commute
time tends to be low and more expensive further out, where the &lsquo;hidden mortgage&rsquo; of commute time can add up to half a
million dollars.</p>

<p>Using Census Data can only help illustrate the hidden mortgage that people are already paying. It can only highlight
some general trends and ideas, it cannot make any statement about particular individual households, nor can the genral
reasoning used to derive the numbers apply to everyone. Or maybe even most people. The estimates are quite rough, likely
underestimating commute costs for drivers, not taking into account the well understood health benefits of active
transportation nor the negative health implications of driving. The commute time to money computation is very rough
and will have to be adjusted if applied to real-world examples. But this is only meant to illustrate ageneral point.</p>

<p>The takeaway should be that the &lsquo;hidden mortgage&rsquo; is real, and it&rsquo;s huge. And often overlooked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vancouver 2011 Census Data on Housing]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2015/06/23/vancouver-2011-census-data-on-housing/"/>
    <updated>2015-06-23T15:26:23-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2015/06/23/vancouver-2011-census-data-on-housing</id>
    <content type="html"><![CDATA[<p>Last week my friend Alejandro emailed me some census data. After sitting on it for a couple of days I decided one evening
to take a look and map the dissemination areas. The dataset contained 125 fields around housing and income. So I started
plucking some of the fields off the table and mapping them.</p>

<p>It did not take long and colorful maps started showing up. Another evening and lots of map layers later I put the
<a href="https://mountainmath.ca/census">Vancouver Census Map</a> online
for people interested to look through the census graphs. The number of layers became a little unwieldly, just pick and
choose what you are interested in.</p>

<p><a href="https://mountainmath.ca/census/?layer=17"><img src="/images/affordability.jpg" alt="&quot;Affordability&quot;" /></a></p>

<h4>So what exactly does the Census Data show?</h4>

<!-- more -->


<p>The data is aggregated at the Dissemination Area level and rounded to protect privacy. That leaves some artefacts, but
generally gives a very detailed picture of what is going on in different parts of the city. The biggest drawback is the
age, the data is now 4 to 5 years old. Lots of things happened in the meantime, we will have to wait until 2016 for the
next Census Canada dataset.</p>

<h4>Where to go from here?</h4>

<p>When I get around to it I might map all of Metro Van Census data. It won&rsquo;t take any time to re-run the import script for
the larger dataset, but I will need to show higher aggregation level data at lower zoom levels to keep it repsonsive
for slower machines, just like I did for the <a href="https://mountainmath.ca/map/assessment">Vancouver Assessment Map</a></p>

<p>I should probably also take a look at what other fields are available, the &lsquo;affordability&rsquo; map linked above uses
individual income for full-time employees instead of combined household income, which differes from how affordability
is usually calculated. The reason is that the data I had did not have the household income. Not sure if it is available
at the dissemination area aggregation level, but if it is that one should be used. But I am lazy, so for now that&rsquo;s it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tax Density in Vancouver]]></title>
    <link href="http://doodles.mountainmath.ca/blog/2015/05/31/density-in-vancouver/"/>
    <updated>2015-05-31T22:44:55-07:00</updated>
    <id>http://doodles.mountainmath.ca/blog/2015/05/31/density-in-vancouver</id>
    <content type="html"><![CDATA[<p>The other day I saw that Downtown brings in 23% of CoV tax revenue but only makes up 5% of the city area. Intrigued by that I decided to
add a &lsquo;Tax Density&rsquo; layer to my <a href="https://mountainmath.ca/map/assessment">Vancouver Assessment Map</a>.
The idea was to try and understand the tax revenue generated by different areas in Vancouver. The data is already available
in the CoV open data property dataset so it would only take half an hour to ad it to my map.</p>

<p><a href="http://mountainmath.ca/map/assessment"><img src="/images/tax_density.jpg" alt="&quot;Tax Density&quot;" /></a></p>

<p>There has been a lot of discussion around density in Vancouver. One aspect of density is that it will generally increase
the tax revenue that the city can collect per square metre. At the same time the city spending for services of the added
density increases at a much lower rate. Leaving a net gain of revenue for the city. As property taxes are
need-based, this means lower property taxes for everyone when density increases. In short, density leads to efficiency
increases that materialize in form of lower property taxes for everyone.</p>

<p>That also points to one possible way to break some of the resistance to density increases that Vancouver currently sees.
If a neighbourhood (or smaller region) accepts density increases, maybe some of the associated benefits
of lower property taxes should be applied locally instead of everything being spread out over the entire city.</p>

<h4>So what exactly does the Tax Density layer show?</h4>

<!-- more -->


<p>The Tax Density I mapped is simply the amount of taxes collected per m&sup2;.
Under that measure, Downtown comes out at $127.1/m&sup2;, followed by the West End at $72.7/m&sup2; and Fairview at
$42.7/m&sup2;. The Vancouver average is $20/m&sup2;, only 6 of the 23 neighbourhoods have an above-average Tax Density.
A complete list of Tax Density by neighbourhood is at the bottom.</p>

<p>For this calculation I did not count the parks doward the area of
the neighbourhoods, but school for example are included. In light of this some of the aggregated data should be viewed
with caution.</p>

<h4>Where to go from here?</h4>

<p>I also thought about mapping the density of housing units, but sadly the data in the CoV open data catalogue is ill-suited to
do this. I can easily extract the number of tax entities and map the density of these. This works great for a traditional
single family home (one tax entity) and for stratas (one tax entity per unit), but it becomes a problem because e.g. laneway
houses and granny suites don&rsquo;t show up as separate tax entities. And it gets really bad with rental apartments, where the
whole building will be a single tax entity with potentially a very large number of units. And then the dataset does not
distinguish between commercial and residential units. That data could be reverse engineered from the tax data, but that&rsquo;s
more work than my usual half hour tolerance level for this kind of side project.</p>

<p>Another option is to use census data and merge the datasets. But that gets messy, the aggregation levels don&rsquo;t match and
this is well beyond a side project time frame.</p>

<p>Similarly, it would be interesting to map the changes in tax density and the changes in unit density in Vancouver, but
again the CoV dataset does hold the necessary information. In particular, when properties get a new tax coordinate (for
example when they get re-developed) the CoV dataset drops the old tax data associated with that physical location. This
makes it impossible to map the changes in tax density that redevelopment has brought.</p>

<p>Long story hort, if you are interested in browsing Vancouver by tax revenue collected per square meter, click through to
the <a href="https://mountainmath.ca/map/assessment">Vancouver Assessment Map</a> and select the Tax Density layer.</p>

<h2>Tax density by neighbourhood</h2>

<ol>
<li>Downtown: $127.1/m&sup2;</li>
<li>West End: $72.7/m&sup2;</li>
<li>Fairview: $42.7/m&sup2;</li>
<li>Kitsilano: $27.8/m&sup2;</li>
<li>Downtown Eastside: $26.4/m&sup2;</li>
<li>Mount Pleasant: $25.4/m&sup2;</li>
<li>Arbutus Ridge: $17.5/m&sup2;</li>
<li>Grandview-Woodland: $16.4/m&sup2;</li>
<li>West Point Grey: $16.3/m&sup2;</li>
<li>Dunbar Southlands: $15.0/m&sup2;</li>
<li>Riley Park: $14.4/m&sup2;</li>
<li>Oakridge: $13.8/m&sup2;</li>
<li>Shaughnessy: $13.5/m&sup2;</li>
<li>Kensington-Cedar Cottage: $12.8/m&sup2;</li>
<li>Renfrew-Collingwood: $12.4/m&sup2;</li>
<li>Strathcona: $12.2/m&sup2;</li>
<li>Kerrisdale: $11.9/m&sup2;</li>
<li>Marpole: $11.8/m&sup2;</li>
<li>South Cambie: $11.7/m&sup2;</li>
<li>Sunset: $11.2/m&sup2;</li>
<li>Hastings-Sunrise: $10.6/m&sup2;</li>
<li>Victoria-Fraserview: $10.0/m&sup2;</li>
<li>Killarney: $7.7/m&sup2;</li>
</ol>

]]></content>
  </entry>
  
</feed>
